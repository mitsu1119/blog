<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>理解するぞ on みつみつみつですか？</title>
        <link>https://mitsu1119.github.io/blog/tags/%E7%90%86%E8%A7%A3%E3%81%99%E3%82%8B%E3%81%9E/</link>
        <description>Recent content in 理解するぞ on みつみつみつですか？</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Thu, 01 Jun 2023 16:46:29 +0900</lastBuildDate><atom:link href="https://mitsu1119.github.io/blog/tags/%E7%90%86%E8%A7%A3%E3%81%99%E3%82%8B%E3%81%9E/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>超楕円曲線暗号を理解するぞ</title>
        <link>https://mitsu1119.github.io/blog/p/%E8%B6%85%E6%A5%95%E5%86%86%E6%9B%B2%E7%B7%9A%E6%9A%97%E5%8F%B7%E3%82%92%E7%90%86%E8%A7%A3%E3%81%99%E3%82%8B%E3%81%9E/</link>
        <pubDate>Thu, 01 Jun 2023 16:46:29 +0900</pubDate>
        
        <guid>https://mitsu1119.github.io/blog/p/%E8%B6%85%E6%A5%95%E5%86%86%E6%9B%B2%E7%B7%9A%E6%9A%97%E5%8F%B7%E3%82%92%E7%90%86%E8%A7%A3%E3%81%99%E3%82%8B%E3%81%9E/</guid>
        <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;　超楕円曲線を，こと超楕円曲線暗号のシステムを理解することに絞って最短ルートで解説できたらなと思います．とは言っても，記事の内容に大きな間違いがあるかもしれません．疑問に思ったことや間違っていそうなことがありましたらぜひ twitter なりなんなりで教えてください．僕が悩みます．
$\gdef\C{\mathbb{C}} \gdef\R{\mathbb{R}} \gdef\D{\mathcal{D}} \gdef\J{\mathcal{J}} \gdef\F{\mathbb{F} _ p}$&lt;/p&gt;
&lt;h2 id=&#34;定義とか&#34;&gt;定義とか&lt;/h2&gt;
&lt;p&gt;　今まで扱ってきた楕円曲線は $v^2 + h(u)v = f(u)$ で $\deg f = 3$ みたいなものでした．これに種数 $g$ という概念を追加します．&lt;br&gt;
　曲線の右辺の多項式 $f$ の次数に関して，種数 $g$ を $\deg f = 2g + 1$ となる整数と定義します．&lt;br&gt;
　通常の楕円曲線は種数 $1$ の曲線で，またその自然な拡張として $g = 2$ のものや $g = 3$ のものも考えることができるようになります．これらの種数が $1$ よりも大きい代数曲線を&lt;strong&gt;超楕円曲線&lt;/strong&gt;といいます．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定義&lt;/strong&gt;&lt;br&gt;
　体 $K$ を係数とする次数 $2g + 1$ のモニック多項式を $f \in K[u]$ とする．このとき（$K$ 上で定義される）超楕円曲線 $C$ は，次数 $g$ 以下の多項式 $h \in K[u]$ を用いて
$$C: v^2 + h(u)v = f(u)$$
を満たす ${\bar K}^2$ 上の点全体と無限遠点の集合として定義される（正確には射影多様体で考えるべきですがここでは省略します）．&lt;/p&gt;
&lt;p&gt;　普通超楕円曲線という場合は非特異なものに限りますが，慣用的に特異点を持つ超楕円曲線という言い方をする場合もあります（楕円曲線でもそういうノリはありますよね……気のせい？）．&lt;/p&gt;
&lt;p&gt;　ちなみに種数の概念が急に出てきて曲線の次数を $2$ ずつ増やしていくのに違和感があるかもしれません．この種数というものは位相幾何の言葉だと「閉曲面の切断によって生じる多様体が連結なままである最大回数」みたいな感じで定義されています．&lt;br&gt;
　楕円曲線は $\wp$ 関数のパラメータから生成される格子 $\Lambda$ を使うと $E(\C) \simeq \C / \Lambda$ でした．また $\C/\Lambda$ は幾何学的にはトーラスだったので種数の定義と合致しており，天下り的に見える種数の登場は代数曲線を複素多様体の世界から見たときに自然な導入となるのです．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mitsu1119.github.io/blog/blog/post14/reinoare.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;例のあれ&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;特異点の条件&#34;&gt;特異点の条件&lt;/h2&gt;
&lt;p&gt;　曲線ができるだけ非特異な場合を考えたいですが，じゃあ非特異な曲線はどういう曲線なのか気になります．ということで $F = v^2 + h(u)v - f$ としておいて，この関数について調べていきたいと思います．&lt;/p&gt;
&lt;p&gt;　まず特異点 $P = (x, y)$ では $F(P) = 0$ が成り立ちます．また各変数での偏微分を考えてあげると
$$\frac{\partial F}{\partial u} = \frac{d h}{du} v - \frac{df}{du}$$
$$\frac{\partial F}{\partial v} = 2v + h$$
となり，どちらも特異点でゼロになります．よって特異な曲線とは，ある点 $P = (x, y) \in {\bar K}^2$ で
$$
\begin{cases}
y^2 + h(x)y = f(x) \\
h&amp;rsquo;(x)y = f&amp;rsquo;(x) \\
2y+h(x)=0 \\
\end{cases}$$
となる曲線だということがわかります．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mitsu1119.github.io/blog/blog/post14/singular_cat.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Singular なネコ&#34;
	
	
&gt;　← Singular なネコ（力作）&lt;/p&gt;
&lt;h2 id=&#34;標準形&#34;&gt;標準形&lt;/h2&gt;
&lt;p&gt;　うわああああああ $h(u)$ 邪魔すぎて面倒くさい〜〜〜〜．超楕円曲線にも Weierstrass 標準形はないんですか？&lt;/p&gt;
&lt;p&gt;　$C: v^2 + h(u)v = f(u)$ について $u \rightarrow u,\ v \rightarrow v - h(u) / 2$ と変数変換してあげると
$$\begin{aligned} (v - h(u) / 2)^2 + h(u)(v - h(u) / 2) &amp;amp;= f(u) \\
v^2 - h(u)v + h(u)^2 / 4 + h(u)v - h(u)^2/2 &amp;amp;= f(u) \\
v^2 &amp;amp;= f(u) + h(u)^2 / 2
\end{aligned}$$
となります．また右辺は $\deg h \geq g$ だったので種数も変わりません．&lt;br&gt;
　ということでこんな感じで標準形が与えられます．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命題&lt;/strong&gt;&lt;br&gt;
　$K$ 上の超楕円曲線 $C$ について，$\mathrm{char}(K) \neq 2$ であるとき $C$ と双有理同値な $v^2 = f(u)$ 型の種数が同じ超楕円曲線が存在する．&lt;/p&gt;
&lt;p&gt;　例として $\R$ 上の曲線 $y^2 + (x^2 - 2x - 3)y = 3x^5 - x^4 + x^3 + x^2 - x - 3$ の標準形を求めてみると $y^2 = 3x^5 - x^4 / 2 - x^3  + 5x  + 3/2$ となります．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mitsu1119.github.io/blog/blog/post14/hyoujun.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;標準形のグラフ&#34;
	
	
&gt;　← 緑が元の曲線，赤が標準形&lt;/p&gt;
&lt;h2 id=&#34;曲線上の点&#34;&gt;曲線上の点&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;定義&lt;/strong&gt;&lt;br&gt;
　$K$ 上で定義される曲線 $C$ の&lt;strong&gt;K-有理点&lt;/strong&gt;を以下の式で定義する．
$$C(K) = (C \cap K^2) \cup \left\{ P_{\infty} \right\}$$
特に $C = C({\bar K}^2)$．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定義&lt;/strong&gt;&lt;br&gt;
　finite point $P = (x, y)$ について，その反数を $\tilde{P} = (x, -y -h(x))$ とする．無限遠点に関しては $\tilde{P_\infty} = P_\infty$ とする．&lt;br&gt;
　また $\tilde{P} = P$ となる点を&lt;strong&gt;分岐点&lt;/strong&gt;と呼び，そうでない点を &lt;strong&gt;ordinary point&lt;/strong&gt; と呼ぶ．&lt;/p&gt;
&lt;p&gt;　多分この辺は楕円曲線と変わらないと思います．$\tilde{P}$ が曲線上にあることは，次のように代入すれば簡単に確かめられます．
$$\begin{aligned}
(-y-h(x))^2 + h(x)(-y - h(x)) &amp;amp;= y^2+2h(x)y + h^2(x) - h(x)y - h^2(x)\\
&amp;amp;= y^2 + h(x)y\\
&amp;amp;= f(x)
\end{aligned}$$&lt;/p&gt;
&lt;h2 id=&#34;座標環&#34;&gt;座標環&lt;/h2&gt;
&lt;p&gt;　多様体上の関数について考えてあげると良いことが起きることが一般的によく知られています．ということで超楕円曲線 $C$ 上の関数を考えてみましょう．&lt;/p&gt;
&lt;p&gt;　例えば $K$ 上の曲線 $C: F = 0$ 上の関数でぱっと思い浮かぶのは $f \in K[u,v]$ です．ですが $K$ 代数において $C$ は別に代数的じゃないので $f$ の根に $C$ に含まれない点が出てきてしまい，$C$ にぴったりフィットする関数全体として $K[u,v]$ はちょっと大きすぎる気がします．&lt;br&gt;
　そこで，じゃあ根が同じくらい $C$ から離れている関数同士は同一視しようという発想が出てきます．数学では結構ありがちですね．ということで Let&amp;rsquo;s イデアル．&lt;/p&gt;
&lt;p&gt;　次のような $F$ から生成されるイデアルを考えます．
$$I(C) = \left\{ f \in K[u, v] \mid \forall P \in C , f(P) = 0 \right\}$$
　このイデアルで剰余をとってあげた環 $K[u,v] / I(C)$ がちょうど $C$ の関数としてふさわしくなります．$f, g$ が $C$ 上で同じ値をとれば $f \equiv g \mod I(C)$ となっていい感じですね．&lt;br&gt;
　このような $C$ 上の代数的な関数全体としてぴったり機能しそうな集合 $K[u, v]/I(C)$ を&lt;strong&gt;座標環&lt;/strong&gt;といいます．&lt;br&gt;
　また $I(C) = (F)$ なので，座標環は $K[u,v]/(F)$ とも書けますね．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定義&lt;/strong&gt;&lt;br&gt;
　$K$ 上の超楕円曲線 $C: v^2 + h(u)v = f(u)$ の&lt;strong&gt;座標環&lt;/strong&gt; $K[C]$ とは次のような剰余環である．
$$K[C] = K[u,v]/(v^2 + h(u)v - f(u))$$
　$\bar K$ 上についても同様に $\bar K[C] = \bar K[u,v]/(v^2 + h(u)v - f(u))$ とし，この元を&lt;strong&gt;多項式&lt;/strong&gt;という．&lt;/p&gt;
&lt;p&gt;　超楕円曲線上の関数 $g \in \bar K [C]$ は，$g$ の $v^2$ を $h(u)v - f(u)$ に置き換えていけば $v$ に関して次数 $1$ になります．つまり $a, b \in \bar K[u]$ を用いて $g = a(u) - b(u)v$ と書くことができます．&lt;br&gt;
　$u$ に関して次数 $2g + 1$ 以下，$v$ に関して次数 $1$ 以下で表現できますね．&lt;/p&gt;
&lt;h2 id=&#34;有理関数&#34;&gt;有理関数&lt;/h2&gt;
&lt;p&gt;　多項式が作れたので有理関数も作りたくなるとことです．有理関数があれば極と零点が定義できますが，実はこれが超楕円曲線を利用した群の構成に密接に関わってくるのです．&lt;br&gt;
　定義は簡単かつ自然なのでペッです．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定義&lt;/strong&gt;&lt;br&gt;
　$K$ 上の超楕円曲線 $C$ の&lt;strong&gt;関数体&lt;/strong&gt; $K(C)$ を以下で定義する．
$$K(C) = \mathrm{Frac}(K[C])$$
$\bar K$ についても同様に $\bar K(C) = \mathrm{Frac}(\bar K[C])$ とし，この元を&lt;strong&gt;有理関数&lt;/strong&gt;という．&lt;/p&gt;
&lt;p&gt;　また，これから使うことになるので極と零点を定義しておきます．解析っぽい話になってウムウムって感じなので雑にノリで定義します．まあ複素解析とほぼ変わらんのですが．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定義&lt;/strong&gt;&lt;br&gt;
　$f \in K(C)$ とする．$P \in C$ が $f(P) = 0$ を満たす時，$P$ は $f$ の&lt;strong&gt;零点&lt;/strong&gt;であるという．
また，$1 / f(P) = 0$ であるとき $P$ は $f$ の&lt;strong&gt;極&lt;/strong&gt;であるという．&lt;/p&gt;
&lt;p&gt;　極や零点の位数も定義できます．まあ重複度ですね．$P \in C$ の零点としての位数を $m_Z(P)$，極としての位数を $m_S(P)$ と書きます．&lt;br&gt;
　また，有理型関数の有名な命題として以下のようなものがあります．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命題&lt;/strong&gt;&lt;br&gt;
　$f \in K(C)$ について，$f$ の零点全体の集合を $Z_f$，極全体の集合を $S_f$ としたとき以下が成り立つ．
$$\sum_{P \in Z_f} m_Z(P) = \sum_{P \in S_f} m_S(P)$$&lt;/p&gt;
&lt;p&gt;　要するに重複度を込めて零点と極の数は同じということですね．ほんまか？って思う人もいるかもしれませんが無限遠点パワーです．&lt;/p&gt;
&lt;h2 id=&#34;曲線上の因子&#34;&gt;曲線上の因子&lt;/h2&gt;
&lt;p&gt;　準備は整いました．さあ，群を作っていきましょう！&lt;/p&gt;
&lt;p&gt;　楕円曲線では曲線上の点で群をなせましたが，超楕円曲線ではそう簡単にはいきません．&lt;br&gt;
　ということで点のタプル的なのを使うんですが，それは以下の感じで定義されます．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定義&lt;/strong&gt;&lt;br&gt;
　$m_1, m_2, \cdots, m_n$ を整数とし，曲線 $C$ 上の有限個の点を $P_1, P_2, \cdots, P_n$ とする．このとき，以下のように表される形式和を曲線 $C$ の&lt;strong&gt;因子&lt;/strong&gt;という．
$$D = \sum_{i=1}^n m_i (P_i)$$
　また因子全体の集合を $\D_C$ と書く．&lt;/p&gt;
&lt;p&gt;　院試がよぎってちょっと嫌ですね……どうでもいいですが $D$ は因子（divisor）の略です．factor とかじゃないので注意です．また点にカッコがついてるのは形式和であることを明示するためです．&lt;/p&gt;
&lt;p&gt;　実はこの因子全体は，$D_1 = \sum m_i (P_i)$，$D_2 = \sum n_i (P_i)$ の和を $D_1 + D_2 = \sum (m_i + n_i) (P_i)$ とすれば可換群になります．&lt;br&gt;
　もしかしたら $D_1$ には含まれているけど $D_2$ には含まれていない点があるかもしれませんが，そういう場合は $D_2$ にも係数 $0$ で含まれているとみなして計算します．&lt;/p&gt;
&lt;p&gt;　ということで $\D_C$ を作って暗号を作っていこう，という気持ちになるんですがちょっと早計です．というのも $\D_C$ は $C$ に対して大きすぎて性質もよくありません．&lt;/p&gt;
&lt;p&gt;　まずは因子の&lt;strong&gt;次数&lt;/strong&gt;というのを $\deg D = \sum m_i$ として定義します．こうすれば因子の次数が $0$ である因子同士の和の次数も $\deg (D_1 + D_2) = \sum (m_i + n_i) = 0$ となります．ということで次数 $0$ の因子全体 $\D_C^0$ は $\D_C$ の部分群になりますね．&lt;/p&gt;
&lt;p&gt;　さらに，次のようにすれば $\D_C^0$ の部分群と $C$ の有理関数を紐付けることできます．&lt;br&gt;
　$f \in K(C)$ に対して
$$D_f = \sum_{P \in Z_f} m_Z(P) (P) - \sum_{P \in S_f} m_S(P) (P)$$
を $f$ の&lt;strong&gt;主因子&lt;/strong&gt;といいます．&lt;/p&gt;
&lt;p&gt;　主因子全体は $\D_C^0$ の部分群になっており，これは零点と極の位数の関係より $D_f \in \D_C^0$ であることと，$f, g \in K(C)$ について $D_f + D_g = D_{fg}$ であることから確かめられます．&lt;/p&gt;
&lt;p&gt;　この主因子を使えば，名前はよく聞くけどよくわからない積分で出てきそうなアレが定義できるようになります！！！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定義&lt;/strong&gt;&lt;br&gt;
　超楕円曲線 $C$ のゼロ因子群を $\D^0$，主因子群を $\D^l$ とする時
$$\J_C = \D^0 / \D^l$$
を曲線の&lt;strong&gt;ヤコビアン&lt;/strong&gt;という．&lt;/p&gt;
&lt;p&gt;　名前はヤコビアンですが，積分の変数変換のヤコビアンとは違うものなので注意です．こいつは本質的には多様体です．ﾓｼﾞｭ…ﾓｼﾞｭ……&lt;br&gt;
　これは $\D^l$ による剰余類群なので $D_1, D_2 \in \D^0$ が $D_1 - D_2 \in \D^l$ を満たす時 $D_1 \equiv D_2 \mod \D^l$ ということです．&lt;/p&gt;
&lt;p&gt;　ヤコビアンでの演算は，まあ適当に代表元同士で計算してその剰余類を計算すればいいんじゃないでしょうか．&lt;/p&gt;
&lt;p&gt;　ちなみに通常の楕円曲線では，このヤコビアンの元と曲線上の点が一対一対応します．超楕円曲線での群演算が楕円曲線での群演算の拡張になっていて嬉しいですね．&lt;br&gt;
　まず $D = \sum m_i (P_i) \in \D^0$ に対して $Q = \sum m_i P_i$ と置けば，$D - (Q) + (P_\infty)$ が実は主因子となり $D \equiv (Q) - (P_\infty) \mod D^l$ となります．&lt;br&gt;
　また一対一であることについては，異なる点 $P_1, P_2 \in C$ について $(P_1) - (P_\infty) \equiv (P_2) - (P_\infty)$ であることから $(P_1) - (P_2) \equiv 0$ となってしまい，$(P_1) - (P_2) \in \D^l$ となって矛盾します．&lt;br&gt;
　ということで $D \mapsto Q$ と対応させれば同型が成り立ちます．&lt;/p&gt;
&lt;h2 id=&#34;mumford-表現&#34;&gt;Mumford 表現&lt;/h2&gt;
&lt;p&gt;　ヤコビアン $\J_C$ は因子類群として定義できましたが，因子は複数個の点と係数の組として扱わなくてはいけないのでちょっと複雑です．&lt;br&gt;
　実は因子の剰余類を簡潔に表現するために，$\J_C$ の元を２つの多項式で表現する天才的な発明があります．これを &lt;strong&gt;Mumford表現&lt;/strong&gt;といいます．&lt;/p&gt;
&lt;p&gt;　Mumford表現では Harley加算などの高速な加算アルゴリズムも見つかり，計算機的にも嬉しいことが多いのです．&lt;br&gt;
　ということで Mumford表現を説明したいところですが，実はこれは一般の因子に対しては定義されません．じゃあどうするか，次のような因子を考えます．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定義&lt;/strong&gt;&lt;br&gt;
　有限個の点 $P_1, P_2, \cdots, P_n$ と無限遠点により定義された因子 $D$ が次の条件を満たす時，$D$ は&lt;strong&gt;半被約因子&lt;/strong&gt;であるという．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$D = \sum_{i = 1}^n m_i (P_i) - (\sum_{i = 1}^n m_i) (P_\infty)\ \ (m_i &amp;gt; 0)$&lt;/li&gt;
&lt;li&gt;$P_i \neq \tilde P_i$ ならば $i$ と異なるすべての $j$ について $P_j \neq \tilde P_i$&lt;/li&gt;
&lt;li&gt;$P_i$ が分岐点ならば $m_i = 1$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　つまり半被約因子とは，$\D^0$ に含まれる，無限遠点以外の係数が全て正で $\tilde P$ も持たず分岐点も複数持たないような因子です．&lt;/p&gt;
&lt;p&gt;　例えば $\mathbb{F} _ 3$ 上の超楕円曲線 $C: y^2 = x^5 + 2x^3 + 1$ について考えていきましょう．$x^2 + 2x + 2$ の根を $\alpha$ として $P_1 = (0, 1),\ P_2 = (0, 2),\ P_3 = (\alpha, 0) \in C$ とします．&lt;br&gt;
　この時，適当な因子を選んで半被約因子であるか判定した結果は次のようになります（実は過去に yoshiking さんが全部判定してくれました）．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$2(P_1) + (P_3) - 3(P_\infty)$ はオーケー&lt;/li&gt;
&lt;li&gt;$2(P_1) - (P_3) - (P_\infty)$ はダメ (条件1)&lt;/li&gt;
&lt;li&gt;$2(P_1) + (P_3) - 2(P_\infty)$ はダメ (条件1)&lt;/li&gt;
&lt;li&gt;$(P_2) + (P_3) - 2(P_\infty)$ はオーケー&lt;/li&gt;
&lt;li&gt;$(P_1)+(P_2)-2(P_\infty)$ はダメ (条件2)&lt;/li&gt;
&lt;li&gt;$2(P_3) - 2(P_\infty)$ はダメ (条件3)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　こんな感じで半被約因子が定義できますが，ちょっと恣意的な感じがしますね．実は任意の因子はそれと $\D^l$ の下で等しい半被約因子を持つことが知られているのです！&lt;br&gt;
　つまり $\J_C$ 内の剰余類の代表現として半被約因子をとってくることができます．Mumford表現は半被約因子という特別な因子でしか定義できませんが，$\J_C$ の表現としては十分機能することがわかりますね．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定義&lt;/strong&gt;&lt;br&gt;
　体 $K$ 上の超楕円曲線 $C: F= 0$ における半被約因子 $D = \sum m_i (P_i) - (\sum m_i)(P_\infty)$ の Mumford表現とは，$U, V \in \bar K[X]$ の組 $(U, V)$ のことである．ただし $U, V$ は $P_i = (x_i,y_i),\ U_i = X - x_i$ とおいた時以下の式を満たすものである．
$$\begin{cases}
U=\prod _ {i=1}^{n} U_{i}^{m_{i}} &amp;amp; \\
F-V^{2} \equiv 0\bmod U &amp;amp; \\
\deg U &amp;gt;\deg V &amp;amp;
\end{cases}$$&lt;/p&gt;
&lt;p&gt;　受け取った因子の Mumford表現を計算するアルゴリズムはちょっと複雑です（もしかしたらこのアルゴリズム単体で記事を書くかもしれません）．&lt;br&gt;
　みんな sagemath 使おう．ヤコビアンの元の表現を，点の組の表現か Mumford表現か選べます．&lt;/p&gt;
&lt;h2 id=&#34;被約因子&#34;&gt;被約因子&lt;/h2&gt;
&lt;p&gt;　実は半被約因子は暗号として使うのに少々問題があります．というのも半被約因子による表現は $\J_C$ の元の一意な表現とはなりません．つまり平文と暗号文の間に一対一対応が作れなくなるしハッシュ化も大変です．&lt;br&gt;
　これを解決するものとして，以下のような因子が考えられています．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定義&lt;/strong&gt;&lt;br&gt;
　種数 $g$ の超楕円曲線の半被約因子 $(U, V)$ について，特に $\deg U &amp;lt; g$ であるものを&lt;strong&gt;被約因子&lt;/strong&gt;という．&lt;/p&gt;
&lt;p&gt;　まあ定義は簡単ですがほえ〜んって感じじゃないでしょうか．&lt;br&gt;
　実は被約因子は $\D^l$ の下でそれと同値な被約因子が一意に存在します．またこれをアルゴリズム的に構成することも可能です（これも単体で記事書くかも．期待はしないでね）．&lt;br&gt;
　ですので，$\J_C$ の元の表現は半被約因子ではなく，被約因子の Mumford表現にすると色々と嬉しくなります．ちなみに sagemath は被約因子を使ってくれます．みんな sagemath 使おう．&lt;/p&gt;
&lt;h2 id=&#34;j_c-の有限部分群&#34;&gt;$\J_C$ の有限部分群&lt;/h2&gt;
&lt;p&gt;　実は今のヤコビアンのままでは超楕円曲線暗号を楕円曲線暗号のように ElGamal のシステムに乗せるのは無理です．というのも一般に $\bar K$（特に $\bar{\mathbb{F} _ p}$）は無限位数なのでヤコビアンも無限位数になってしまうのです．ElGamal のシステムに乗せるには，少なくとも有限群でなくてはいけません．&lt;/p&gt;
&lt;p&gt;　ということで $\J_C$ の有限部分群を考えていきましょう．と言ってもこれは簡単です．&lt;/p&gt;
&lt;p&gt;　とりあえず今のヤコビアンが Mumford表現を使ってどう表現されるのか明示しておきます．
$$\J_C = \left\{ (U, V) \in \bar K[X]^2 \mid \deg V &amp;lt; \deg U &amp;lt; g,\ F - V^2 \equiv 0 \mod U \right\}$$&lt;/p&gt;
&lt;p&gt;　これの $K$-有理点のようなものを考えれば良くて，次のようにします．&lt;br&gt;
$$\J_C(K) = \left\{ (U, V) \in K[X]^2 \mid (U, V) \in \J_C \right\}$$&lt;br&gt;
　$K$ が有限であれば $U, V$ の次数が制限されるので自然に $\J_C(K)$ も有限位数となります．暗号として実装する場合は $K = \mathbb{F} _ p$ として $\J_C(\mathbb{F} _ p)$ を計算するのが一番自然かと思います．&lt;/p&gt;
&lt;p&gt;　上では Mumford表現を使って $K$-有理点を構成しましたが，標数 $p$ の有理点は因子による表現でもかなり簡潔に表記できます．Frobenius写像 $\varphi$ を
$$\varphi: \J_C \ni D \longmapsto D^p \in \J_C$$
と定めます．ここで注意なのが，$D^p = \sum m_i (P_i)^p - (\sum m_i)(P_\infty),\ P^p = (x^p, y^p)$ です．&lt;br&gt;
　この Frobenius写像により固定される集合こそが $\mathbb{F} _ p$-有理点 $\J_C(\mathbb{F} _ p) = \left\{ D \in \J_C \mid \varphi(D) = D \right\}$ となります（そもそも $K$-有理点という概念が $G_{\bar K / K}$ で固定される集合なので）．&lt;/p&gt;
&lt;h2 id=&#34;超楕円曲線暗号&#34;&gt;超楕円曲線暗号&lt;/h2&gt;
&lt;p&gt;　やっとこさ暗号のシステムの話になります．といってもここまで理解できてればあとは簡単で，超楕円曲線暗号は $C$ のヤコビアン $\J_C(\F)$ での離散対数問題に関する暗号です．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;公開パラメータ&lt;/strong&gt;&lt;br&gt;
$p$: 素数&lt;br&gt;
$C$: $\F$ 上の超楕円曲線&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;鍵生成&lt;/strong&gt;&lt;br&gt;
$D_g$: ランダムな $\J_C(\F)$ の元&lt;br&gt;
$s$: ランダムな $\left\{0,\cdots,\# \J_C(\F) \right\}$ の元&lt;br&gt;
$D = sD_g$ を計算し，$(D, D_g)$ を公開鍵，$s$ を秘密鍵とする．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;暗号化&lt;/strong&gt;&lt;br&gt;
$M \in C$ を平文として $r \in \left\{0, \cdots, \# \J_C(\F) \right\}$ を乱数とする．&lt;br&gt;
$$(C_1, C_2) = (rD_g,\ rD + M)$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;複合&lt;/strong&gt;&lt;br&gt;
$$\begin{aligned}
C_2 - sC_1 &amp;amp;= rD + M - srD_g
&amp;amp;= srD_g + M - srD_g
&amp;amp;= M
\end{aligned}$$&lt;/p&gt;
&lt;p&gt;　sagemath で実装する場合は，HyperEllipticCurve(f, h) で超楕円曲線を生成し，C.jacobian() でヤコビアンを生成，J(GF(p)) で $\F$-有理点を作ってやりましょう．&lt;br&gt;
　僕も実装してみた．かなりガバいのぜこの実装は全人類真似しないでください．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# hcc.sage&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# --------------------&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 公開パラメータ&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# -------------------- &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;nbits&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random_prime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nbits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nbits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Fp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PolynomialRing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Fp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random_element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HyperellipticCurve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;J&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jacobian&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;[Public Parameter]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;p: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;C: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# -------------------- &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 鍵生成&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# -------------------- &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# この s と Dg の生成方法って大丈夫なんかな&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# なんか危ない気がする&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Fp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random_element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;n&#34;&gt;Dg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;J&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lift_x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Weil の不等式から p^2 &amp;lt;= (sqrt(p) - 1)^(2g) &amp;lt;= J.order&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;randint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dg&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;[Public Key]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;D:  &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Dg: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dg&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# -------------------- &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 暗号化&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# -------------------- &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8931&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;M&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;J&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lift_x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;# 平文のハッシュ化も悩みどころ．lift_x だと曲線上に平文がない可能性がある&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;randint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;C1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dg&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;C2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;M&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;[Cipher Text]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;C1: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C1&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;C2: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C2&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# -------------------- &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 複合&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# -------------------- &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;MM&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;C2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;[Decryption]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;m: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;　それでは良き超楕円曲線ライフを！&lt;br&gt;
　ちなみに超楕円曲線暗号は安全な曲線の生成法や計算量に問題があり，まだ研究段階です……なんもかんもヤコビアンの位数計算が悪い（気がする）&lt;/p&gt;
</description>
        </item>
        <item>
        <title>LLLを理解するぞ</title>
        <link>https://mitsu1119.github.io/blog/p/lll%E3%82%92%E7%90%86%E8%A7%A3%E3%81%99%E3%82%8B%E3%81%9E/</link>
        <pubDate>Sun, 10 May 2020 20:51:59 +0000</pubDate>
        
        <guid>https://mitsu1119.github.io/blog/p/lll%E3%82%92%E7%90%86%E8%A7%A3%E3%81%99%E3%82%8B%E3%81%9E/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;大体タイトル通りの記事です．LLLを解説していきます．&lt;br&gt;
性質や定理の証明は一つ一つ丁寧に与えていこうと思いますが，何から何まで全てやって記事を書ききる自信はないので，基本的な線形代数の内容(特に線形空間やノルム周り)は前提知識として進めていきます．また，格子に関する基本的な性質やLLLを理解するのに必要な部分の解説しかないので，もしこの記事を読んでもっと勉強したいと思った方は適当な本を読むことをお勧めします（つまり内容が薄いです．許してください）．またその関係上内容が直感的にわかりやすいものでは無いかもしれませんのでそのあたりはご了承ください．
もし自分が理解したつもりになっている内容に誤りがあったらコメントで教えてください．特に用語の日本語訳が非常に怪しい感じになっています．証明の書き方が稚拙だったり，特にサイズ簡約の部分で添え字が複雑になってしまっていたり，正直そこまでうまく説明できている自信がないためお手柔らかにお願いします……あと，判断できない命題はとりあえず定理にしています．お許しください．&lt;br&gt;
とにかくコードだけ欲しいという方はこのリポジトリを参照してください．verifyはしてないので結構怪しい感じですが，オープンソースで上がっている他のLLLと比較したら出力が同じだったので多分大丈夫だと思います．&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mitsu1119/Lattice_Reduction&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://gh-card.dev/repos/mitsu1119/Lattice_Reduction.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;mitsu1119/Lattice_Reduction - GitHub&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;1-格子&#34;&gt;1. 格子&lt;/h2&gt;
&lt;p&gt;一応この記事は，格子を知らない状態からLLLを理解するまでの道みたいな感じで作ったつもりです．ということで，前提となる格子からをちゃんと定義しておきます．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定義 1.1:&lt;/strong&gt;
線形独立な $n$ 本のベクトル $b _ 1,b _ 2,\cdots ,b _ n \in \mathbb{R} ^ m$ によって張られる&lt;strong&gt;格子&lt;/strong&gt; $ \mathcal{L}(b _ 1,b _ 2,\cdots,b _ n)$ を次のように定義する．$$\displaystyle \mathcal{L}(b _ 1,b _ 2,\cdots,b _ n) = \left\{ \sum x _ ib _ i \mathrel{}\middle|\mathrel{} x _ i \in \mathbb{Z} \right\}$$この時， $ \left\{b _ 1,b _ 2,\cdots,b _ n \right\}$ を格子の&lt;strong&gt;基底&lt;/strong&gt;と呼び， $ n$ を格子の&lt;strong&gt;次数&lt;/strong&gt;と言う．
また $ n = m$ であるとき，格子 $ \mathcal{L}(b _ 1,b _ 2,\cdots,b _ n)$ は&lt;strong&gt;full-rankである&lt;/strong&gt;と言う．&lt;/p&gt;
&lt;p&gt;full-rankでない例は $ m &amp;gt; n$ の場合を適当に考えれば作れます．例えば $ {} ^ t\!b _ 1 = \begin{pmatrix} 1 &amp;amp; 0 &amp;amp; 1 \end{pmatrix},\ {} ^ t\!b _ 2 = \begin{pmatrix} 0 &amp;amp; 1 &amp;amp; 2 \end{pmatrix}$ とすれば $ b _ 1$ と $ b _ 2$ は線形独立ですが，これによって作られる二次元の格子 $ \mathcal{L}(b _ 1,b _ 2)$ は明らかにfull-rankになりません．また， $ m &amp;lt; n$ の時は各ベクトルが線形独立にならないので注意してください．&lt;/p&gt;
&lt;p&gt;格子の表記について，基底となる列ベクトル $ b _ 1,b _ 2,\cdots,b _ n$ を横に並べた $ m \times n$ 行列 $ B$ を使って$$ \mathcal{L}(B) = \mathcal{L}(b _ 1,b _ 2,\cdots,b _ n) = \left\{ Bx \mathrel{}\middle|\mathrel{} x \in \mathbb{Z} ^ n \right\}$$と表すこともあります．このときの $B$ のことを&lt;strong&gt;基底行列&lt;/strong&gt;と言います．&lt;/p&gt;
&lt;p&gt;一応図を用意しました．黒い点が格子の元で，原点から出ている黒い矢印が基底を構成するベクトルです．なんとなく格子という名前通りの集合になっていますね．
&lt;img src=&#34;https://mitsu1119.github.io/blog/blog/post1/lattice_ex1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;lattice_ex1&#34;
	
	
&gt;
$$ \displaystyle B=\begin{pmatrix} 1 &amp;amp; 0 \\ 0 &amp;amp; 1 \end{pmatrix}$$
&lt;img src=&#34;https://mitsu1119.github.io/blog/blog/post1/lattice_ex2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;lattice_ex2&#34;
	
	
&gt;
$$ \displaystyle B=\begin{pmatrix} 1 &amp;amp; 1 \\ 1 &amp;amp; 2 \end{pmatrix}$$&lt;/p&gt;
&lt;p&gt;この例を見て気づいた方は多いと思いますが，実は倍数全体の集合 $ m\mathbb{Z} ^ n$ も格子です．基底行列を $ mI$ と取ればうまく張れると思います．
ちなみに上の例の二つの基底行列は同じ格子を張ります．このような，同じ格子を張るような基底は無限に存在します．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定義 1.2:&lt;/strong&gt;
整数行列かつ行列式が $1$ か $-1$ であるような正方行列を&lt;strong&gt;ユニモジュラ行列&lt;/strong&gt;という．&lt;/p&gt;
&lt;p&gt;ユニモジュラ行列 $ U$ の行基本変形を考えれば， $ U ^ {-1}$ もまたユニモジュラ行列であることがわかります．また，二つのユニモジュラ行列 $ U,U&#39;$ について， $ \det(UU&#39;) = \det U \cdot \det U&#39; = \pm1$ となります．よって $ n$ 次のユニモジュラ行列全体は $ n$ 次の正則行列からなる群の部分群となります．ちなみにこの群は， $ GL _ n(\mathbb{Z})$ と表せます．&lt;/p&gt;
&lt;p&gt;実は，このユニモジュラ行列を使えば基底行列$ B _ 1, B _ 2$が同じ格子を張るか否かを考えることができます．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定理 1.1:&lt;/strong&gt;
基底行列 $ B _ 1, B _ 2 \in \mathbb{R} ^ {m \times n}$ が同じ格子を張る，つまり $ \mathcal{L}(B _ 1)= \mathcal{L}(B _ 2)$ である必要十分条件は， $ B _ 1 = B _ 2U$ となるユニモジュラ行列 $ U$ が存在することである．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;証明:&lt;/strong&gt;
まず $ \mathcal{L}(B _ 1) = \mathcal{L}(B _ 2)$ と仮定する．このとき格子の定義より， $ B _ 1 = B _ 2V,\ B _ 2 = B _ 1W$ を満たす整数の正方行列 $V,W$ が存在する．従って $ B _ 1 = B _ 1WV$ なので $ B _ 1(I - WV)= O$ となる（ただし $ I$ は $ n$ 次の単位行列）． $ B _ 1$ は線形独立なベクトルの集まりだったため $ WV = I$ となり，行列式を考えると $ \det(WV) = \det W \cdot \det V = 1$ ． $ \det W,\det V \in \mathbb{Z}$ なので $ \det W=\det V= \pm 1$ となる．
次に，あるユニモジュラ行列 $ U$ を使って $ B _ 1 = B _ 2U$ と書けたと仮定する．この時，格子の定義より $ \mathcal{L}(B _ 1) \subseteq \mathcal{L}(B _ 2)$ である．また $ B _ 1U ^ {-1} = B _ 2$ でもあり， $ U ^ {-1}$ もユニモジュラ行列なので同様に $ \mathcal{L}(B _ 2) \subseteq \mathcal{L}(B _ 1)$ ．従って $ \mathcal{L}(B _ 1) = \mathcal{L}(B _ 2)$ ． $ ■$&lt;/p&gt;
&lt;p&gt;このように，同じ格子の基底同士はユニモジュラ行列によって関連付けられています．&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;2-格子の行列式&#34;&gt;2. 格子の行列式&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;定義 2.1:&lt;/strong&gt;
基底行列 $ B = \begin{pmatrix} b _  {1} &amp;amp; \cdots  &amp;amp; b _  {n} \end{pmatrix} \in \mathbb{R} ^ {m \times n}$ の格子 $ \Lambda$ の&lt;strong&gt;スパン&lt;/strong&gt; $ \mathrm{span}(\Lambda)$ とは，次のような線形包である．$$ \mathrm{span}(\Lambda) = \mathrm{span}(b _ 1,\cdots,b _ n) = \mathrm{span}(B) = \left\{ By \mathrel{}\middle|\mathrel{} y \in \mathbb{R} ^ n \right\}$$&lt;/p&gt;
&lt;p&gt;定義より，格子 $ \Lambda$ の基底行列 $ B$ は $ \mathrm{span}(\Lambda)$ の基底行列にもなります．また，格子 $ \Lambda$ がfull-rankな時， $ \mathrm{span}(\Lambda) = \mathbb{R} ^ n$ となります．このスパンのおかげで格子の点と点の隙間を考えることができ，格子上の計算をスパンにマッピングして行ってから元の格子に射影し直すという操作を使うことで，それなりに自由に計算が行えるようになります．後述のLLLアルゴリズムもこの方法を使っています．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定義 2.2:&lt;/strong&gt;
格子の基底行列 $ B = \begin{pmatrix} b _  {1} &amp;amp; b _  {2} &amp;amp; \cdots  &amp;amp; b _  {n} \end{pmatrix} \in \mathbb{R} ^ {m \times n}$ の&lt;strong&gt;基本平行体&lt;/strong&gt; $ \mathcal{P}(B)$ を次のように定義する．$$ \displaystyle \mathcal{P}(B) = \left\{ \sum ^ {n} _ {i=1}x _ ib _ i \mathrel{}\middle|\mathrel{} 0 \leq x _ i &amp;lt; 1 \right\}$$&lt;/p&gt;
&lt;p&gt;基本平行体は，上の格子の例における灰色に塗りつぶしてある部分と対応しています．また，格子の定義より，各格子ベクトルを基準として基本平行体を平行移動させていくことで $ \mathrm{span}(B)$ をタイリングすることができます．つまり，次の式が成り立ちます．$$ \displaystyle \bigcup _  {v\in \mathcal{L}( B)}( v+\mathcal{P}( B)) = \mathrm{span}(B)$$また，基本平行体に限らずこのような性質を持つ集合を&lt;strong&gt;基本領域&lt;/strong&gt;と呼びます．例えば集合$$ \displaystyle \mathcal{C}(B) = \left\{ Bx \mathrel{}\middle|\mathrel{} -\frac{1}{2} \leq x &amp;lt; \frac{1}{2} \right\}$$も基本領域です（基本平行体とほとんど変わらないけど）．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定義 2.3:&lt;/strong&gt;
基底行列 $ B \in \mathbb{R} ^ {m \times n}$ の格子 $ \Lambda$ の&lt;strong&gt;行列式&lt;/strong&gt;を次の式で定義する．$$ \det \Lambda = \mathrm{vol}(\mathcal{P}(B)) = \sqrt{\det\left({} ^ t\!BB\right)}$$但し $ \mathrm{vol}(\mathcal{P}(B))$ は基本平行体 $ \mathcal{P}(B)$ の $ n$ 次元体積とする．&lt;/p&gt;
&lt;p&gt;$ B$ が正方行列，つまりfull-rankな格子の基底行列であれば $ \det B = \det({} ^ t\!B)$ なので， $ \det \Lambda$ はより簡単に $ \det \Lambda = |\det B|$ と表せます．
また，格子の行列式は基底の取り方によらず一定です．つまり，ある格子の基底行列 $ B _ 1,B _ 2$ について $ \Lambda = \mathcal{L}(B _ 1) = \mathcal{L}(B _ 2)$ ならば， $$ \det \Lambda = \det(\mathcal{L}(B _ 1)) = \det(\mathcal{L}(B _ 2))$$ が成り立ちます．なぜなら， $ \mathcal{L}(B _ 1) = \mathcal{L}(B _ 2)$ なのであるユニモジュラ行列 $ U$ を用いて $ B _ 1 = B _ 2U$ とかけ，この時 $$ \det(\mathcal{L}(B _ 1)) =  \sqrt{\det\left({} ^ t\!B _ 1B _ 1\right)} =  \sqrt{\det\left({} ^ t\!U{} ^ t\!B _ 2B _ 2U\right)} =  \sqrt{\det\left({} ^ t\!B _ 2B _ 2\right)}$$ が成り立つからです．よって次の定理が得られます．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定理 2.1&lt;/strong&gt;
格子 $ \Lambda$ の基底行列 $ B _ 1,B _ 2$ について，次の式が成り立つ．$$ \det \Lambda = \det(\mathcal{L}(B _ 1)) = \det(\mathcal{L}(B _ 2))$$&lt;/p&gt;
&lt;p&gt;逆は言えないので注意してください（基底行列の次数が違う場合が反例としてあげられます）．&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;3-逐次最小&#34;&gt;3. 逐次最小&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;定義 3.1:&lt;/strong&gt;
$ B \in \mathbb{R} ^ {m \times n}$ を基底行列とする格子 $ \Lambda$ について，自然数 $ 1 \leq i \leq n$ に対する $ i$ 番目の逐次最小 $ \lambda _ i = \lambda _ i(\Lambda)$ を次の式で定義する．$$\lambda _  {i} (\Lambda )=\inf\left\{r \mathrel{}\middle|\mathrel{} i\leq \dim (\mathrm{span} (\Lambda \cap B(0;r)))\right\} \ \\ \hspace{6em} \mathit{where} \ B(0;r)=\left\{x\in \mathbb{R} ^ {m} \mathrel{}\middle|\mathrel{} |x| \leq r \right\} $$&lt;/p&gt;
&lt;p&gt;多分ぱっと見ではこの式が何を言っているのかわかりにくいと思いますが（自分はわからなかった）言っていることは実は結構簡単で，要するに逐次最小 $ \lambda _ i$ とは， $ i$ 個の線形独立な格子の元を含む原点中心の最小の超球の半径です．
この定義より，格子 $ \Lambda$ の線形独立な格子ベクトルを短い順に $ n$ 個とってできたベクトルの組 $ v _ 1,\cdots,v _ n$ の長さはそれぞれ $ \lambda _ 1,\cdots,\lambda _ n$ となることがわかります．ただし注意として，五次元以上の格子では $ \left\{ v _ 1,\cdots,v _ n \right\}$ が必ずしも $ \Lambda$ の基底になるとは限りません．
例えば格子 $ \Lambda$ の基底行列 $ B$ を$$\displaystyle B=\begin{pmatrix} b _  {1} &amp;amp; \cdots  &amp;amp; b _  {5} \end{pmatrix} = \begin{pmatrix} 2 &amp;amp;  &amp;amp;  &amp;amp;  &amp;amp; 1\\ &amp;amp; 2 &amp;amp;  &amp;amp;  &amp;amp; 1\\ &amp;amp;  &amp;amp; 2 &amp;amp;  &amp;amp; 1\\ &amp;amp;  &amp;amp;  &amp;amp; 2.2 &amp;amp; 1.1\\ &amp;amp;  &amp;amp;  &amp;amp;  &amp;amp; 1 \end{pmatrix}$$としたとき，ノルムが逐次最小になる線形独立な格子ベクトルの組を並べた行列 $ V$ は次のようになります．$$ \displaystyle V=\begin{pmatrix} v _ {1} &amp;amp; \cdots  &amp;amp; v _ {5} \end{pmatrix} =\begin{pmatrix} 2 &amp;amp;  &amp;amp;  &amp;amp;  &amp;amp; \\ &amp;amp; 2 &amp;amp;  &amp;amp;  &amp;amp; \\ &amp;amp;  &amp;amp; 2 &amp;amp;  &amp;amp; \\ &amp;amp;  &amp;amp;  &amp;amp; 2.2 &amp;amp; \\ &amp;amp;  &amp;amp;  &amp;amp;  &amp;amp; 2 \end{pmatrix}$$ $ v _ 5$ は $ 2b _ 5 - b _ 4 - b _ 3 - b _ 2 - b _ 1$ で作れます．しかし，格子は基底ベクトルの整数倍しか含まないため， $ b _ 5 \notin \mathcal{L}(V)$ となるため $ V$ は $ \Lambda$ の基底になれません（基底は実数のベクトルが許されているものの格子点はその整数倍しか許されていないところがミソです）．これと同じような基底行列を用意してあげれば，より高い次元の格子での反例も簡単に作れます．&lt;/p&gt;
&lt;p&gt;では次に，格子における有名な諸定理を紹介します．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定理 3.1 (Blichfeldtの定理):&lt;/strong&gt;
基底行列 $ B \in \mathbb{R} ^ {m \times n}$ の格子を $ \Lambda$ とする．このとき集合 $ S \subseteq \mathrm{span}(B)$ について $ \mathrm{vol}(S) &amp;gt; \det \Lambda$ ならば $ z _ 1 - z _ 2 \in \Lambda$ なる $ z _ 1,z _ 2 \in S$ が存在する．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;証明:&lt;/strong&gt;
$ S _ x = S \cap (x + \mathcal{P}(B)),\ x \in \Lambda$ とすると次の式が成り立つ．$$ \displaystyle S = \bigcup _  {x \in \Lambda} S _  x$$従って，$$ \displaystyle \mathrm{vol}(S)=\sum _  {x \in \Lambda} \mathrm{vol}(S _  x)$$となる．ところで， $ S _  x&#39; = S _  x - x = (S - x) \cap \mathcal{P}(B)$ とすると $ \mathrm{vol}(S _  x)=\mathrm{vol}(S&#39; _  x)$ なので，仮定より$$ \displaystyle \det \Lambda &amp;lt; \mathrm{vol}(S) = \sum _  {x \in \Lambda} \mathrm{vol}(S _  x) = \sum _  {x \in \Lambda} \mathrm{vol}(S _  x&#39;)$$また， $ S _  x&#39; \subseteq \mathcal{P}(B)$ なので $ (S _  x) _  {x \in \Lambda}$ は素集合系ではないため， $ S _  x&#39; \cap S _  y&#39; \neq \emptyset$ かつ $ x \neq y$ を満たす $ x, y \in \Lambda$ が存在する．
よって， $ z \in S _  x&#39; \cap S _  y&#39; \neq \emptyset$ に対し $ z _  1 = z + x \in S _  x, \ z _  2 = z + y \in S _  y$ とすれば $ z _  1 - z _  2 = x - y \in \Lambda$ となり，定理を満たすベクトルを構成することができる．$ ■$&lt;/p&gt;
&lt;p&gt;まあ要するに，格子 $  \mathcal{L}(B) $ のスパン上の，体積が $  \det \Lambda $ を超える集合は，基本平行体で切り分けて一つの領域に集めた時必ず重なる点があるから成り立つということです（下図参照）．&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;このBlichfeldtの定理を利用すれば，次の有名な定理が簡単に示せます．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定理 3.2 (Minkowskiの凸体定理):&lt;/strong&gt;
$  \Lambda $ を $  n $ 次のfull-rankな格子とする．このとき原点に対して対称な凸集合 $  M \subset \mathbb{R} ^ n $ が $  \mathrm{vol}(M) &amp;gt; 2 ^ n \det \Lambda $ ならば， $  x \in M $ を満たす $  x \neq 0 \in \Lambda $ が存在する．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;証明:&lt;/strong&gt;
$  M&#39; = \left\{x \mathrel{}\middle|\mathrel{} 2x \in M \right\} $ とする．このとき仮定より $  \mathrm{vol}(M&#39;) = 2 ^ {-n}\mathrm{vol}(M) &amp;gt; \det \Lambda $ となり，Blichfeldtの定理より， $  z _ 1 - z _ 2 \in \Lambda \setminus \left\{0\right\} $ を満たす $  z _ 1, z _ 2 \in M&#39; $ が存在する．また， $  z _ 1,z _ 2 $ は $  M&#39; $ の定義より $  2z _ 1,2z _ 2 \in M $ を満たすため，仮定より $  -2z _ 2 \in M $ なので $  x = z _ 1 - z _ 2 = \frac{2z _ 1 - 2z _ 2}{2} \in M $ とすれば定理を満たすベクトルを構成することができる． $  ■ $&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定理 3.3:&lt;/strong&gt;
$  n $ 次のfull-rankな格子 $  \Lambda $ の逐次最小 $  \lambda _ 1 $ について次の式が成り立つ．$$  \displaystyle \lambda _ 1 \leq \sqrt{n}(\det \Lambda) ^ {\frac{1}{n}} $$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;証明:&lt;/strong&gt;
閉球 $  B(0; r) \subset \mathbb{R} ^ n $ について，立方体 $  X = \left[-\frac{r}{\sqrt{n}}, \frac{r}{\sqrt{n}} \right] ^ {n} \subset \mathbb{R} ^ n $ は $  X \subseteq B(0; r) $ を満たす．従って， $   \mathrm{vol}(X) = 2 ^ n(\frac{r}{\sqrt{n}}) ^ n \leq \mathrm{vol}(B(0;r)) $ となる．よって $  r = \sqrt{n}(\det \Lambda) ^ {\frac{1}{n}} $ とすれば $  \mathrm{vol}(B(0; r)) \geq 2 ^ n\det \Lambda $ が成り立ち，Minkowskiの凸体定理より $  B(0; r) $ の内側に格子点が存在するため， $  r =  \sqrt{n}(\det \Lambda) ^ {\frac{1}{n}} $ より短い格子ベクトルが存在する． $  ■ $&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;4-グラムシュミットの直交化法&#34;&gt;4. グラム・シュミットの直交化法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;定義 4.1:&lt;/strong&gt;
内積空間 $  V $ の基底 $  \left\{b _  1, b _  2,\cdots,b _  n \right\} $ から，同じ空間を張るような直交基底 $  \left\{b _  1  ^  *,b _  2  ^  *,\cdots,b _  n  ^  * \right\} $ を次の式から求める操作を&lt;strong&gt;グラム・シュミットの直交化法&lt;/strong&gt;という．
$$  \displaystyle b  ^  {*} _  {i} =b _  {i} -\sum   ^  {i-1} _  {j=1} \mu _  {i,j} b  ^  {*} _  {j}\ \mathit{where}\ \mu _  {i,j} =\frac{\langle b _  {i} ,b  ^  {*} _  {j} \rangle }{\langle b  ^  {*} _  {j} ,b  ^  {*} _  {j} \rangle } $$&lt;/p&gt;
&lt;p&gt;正規化しないことに注意してください（グラム・シュミットの正規直交化として書いてあることが多いので）．
また簡単のため，グラム・シュミットの直交化における係数 $  \mu _  {i,j}\ (1 \leq j &amp;lt; i \leq n) $ を&lt;strong&gt;グラムシュミット係数&lt;/strong&gt;と呼び， $  \left\{ b _  1,\cdots,b _  n \right\} $ をグラム・シュミットの直交化法で直交化したときに得られる新たなベクトル $  b _  1 ^ *,\cdots,b _  n ^ * $ を&lt;strong&gt;グラムシュミットベクトル&lt;/strong&gt;と呼ぶことにします．さらに，グラム・シュミットの直交化法を，基底行列 $  B = \begin{pmatrix} b _  {1} &amp;amp; \cdots  &amp;amp; b _  {n} \end{pmatrix} $ から $  B ^ * = \begin{pmatrix} b _  {1} ^ * &amp;amp; \cdots  &amp;amp; b _  {n} ^ * \end{pmatrix} $ を得る操作としても用いるようにします．
一応疑似コードも載せておきます．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mitsu1119.github.io/blog/gramschmidt.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;gramschmidt&#34;
	
	
&gt;
見てわかる通り，計算量は $  \Theta(n ^ 2m) $ です．&lt;/p&gt;
&lt;p&gt;では次に，グラムシュミットベクトルの基本的な性質を紹介します．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;性質 4.1:&lt;/strong&gt;
内積空間 $  V $ の基底を $  \left\{b _  1,\cdots,b _  n \right\} $ とする．このとき，グラムシュミットベクトル $  b _  1 ^ *,\cdots,b _  n ^ *  $ は自然数 $  1 \leq i \leq n $ に対し次の式を満たす．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$| b _ i ^ * | \leq | b _ i | $&lt;/li&gt;
&lt;li&gt;$\langle b _ i, b _ i ^ * \rangle = \langle b _ i ^ *,b _ i ^ * \rangle $
&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;証明:&lt;/strong&gt;
まず一つ目の式について，$$  \displaystyle \begin{aligned} | b ^ {*} _ {i} |  ^ {2} &amp;amp;=\langle b _ {i} -\sum  ^ {i-1} _ {j=1} \mu _ {i,j} b ^ {*} _ {j} ,b _ {i} -\sum  ^ {i-1} _ {j=1} \mu _ {i,j} b ^ {*} _ {j} \rangle \\ &amp;amp;=| b _ {i} |  ^ {2} -\sum  ^ {i-1} _ {j=1} \mu  ^ {2} _ {i,j} | b ^ {*} _ {j} |  ^ {2} \end{aligned} $$なので明らかに $  | b _ i ^ * | \leq | b _ i | $ が成り立つ．
また，二つ目の式も同様に$$  \displaystyle \begin{aligned} \langle b _ {i} ,b ^ {*} _ {i} \rangle  &amp;amp; =\langle b _ {i} ,b _ {i} -\sum  ^ {i-1} _ {j=1} \mu _ {i,j} b ^ {*} _ {j} \rangle \\  &amp;amp; =| b _ {i} |  ^ {2} -\sum  ^ {i-1} _ {j=1} \mu _ {i,j} \langle b ^ {*} _ {i} +\sum  ^ {i-1} _ {k=1} \mu _ {i,k} b ^ {*} _ {k} ,b ^ {*} _ {j} \rangle \\  &amp;amp; =| b _ {i} |  ^ {2} -\sum  ^ {i-1} _ {j=1} \mu _ {i,j} | b ^ {*} _ {j} |  ^ {2} \end{aligned} $$が成り立ち， $  \langle b _ i, b _ i ^ * \rangle = |b _ i ^ *| ^ 2 = \langle b _ i ^ *, b _ i ^ * \rangle $ となる． $  ■ $&lt;/p&gt;
&lt;p&gt;また，格子 $  \Lambda $ の基底 $  \left\{ b _ 1, \cdots, b _ n \right\} \in \mathbb{R} ^ {m \times n} $ のグラムシュミットベクトルは，定義より明らかに $  \mathrm{span}(b _ 1,\cdots,b _ n) = \mathrm{span}(b _ {1} ^ *, \cdots , b _ {n} ^ *) $ となります．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定理 4.2:&lt;/strong&gt;
格子 $  \Lambda $ の基底を $  \left\{ b _ 1,\cdots,b _ n \right\} $ とする．この時，格子の行列式 $  \det \Lambda $ をグラムシュミットベクトル $  b _ 1 ^ *,\cdots,b _ n ^ * $ を用いて次のように表すことができる．$$  \displaystyle \det \Lambda = \prod _ {i = 1} ^ n |b _ i ^ * | $$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;証明:&lt;/strong&gt;
$  B = \begin{pmatrix} b _ {1} &amp;amp; b _ {2} &amp;amp; \cdots  &amp;amp; b _ {n} \end{pmatrix} $ とする．このとき， $  b _ i = b _ i ^ * + \sum  ^ {i-1} _ {j=1} \mu _ {i,j} b ^ {*} _ {j} $ なので次の式が成り立つ．
$$\begin{aligned} B &amp;amp; = \begin{pmatrix} b ^ {*} _ {1} &amp;amp; b ^ {*} _ {2} +\mu _ {2,1} b ^ {*} _ {1} &amp;amp; b ^ {*} _ {3} +\mu _ {3,1} b ^ {*} _ {1} +\mu _ {3,2} b ^ {*} _ {2} &amp;amp; \cdots  &amp;amp; b ^ {*} _ {n} +\sum  ^ {n-1} _ {j=1} \mu _ {i,j} b ^ {*} _ {j} \end{pmatrix}\\  &amp;amp; = \begin{pmatrix} b ^ {*} _ {1} &amp;amp; b ^ {*} _ {2} &amp;amp; b ^ {*} _ {3} &amp;amp; \cdots  &amp;amp; b ^ {*} _ {n} \end{pmatrix}\begin{pmatrix} 1 &amp;amp; \mu _ {2,1} &amp;amp; \mu _ {3,1} &amp;amp; \cdots  &amp;amp; \mu _ {n,1}\\ 0 &amp;amp; 1 &amp;amp; \mu _ {3,2} &amp;amp; \cdots  &amp;amp; \mu _ {n,2}\\ 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; \cdots  &amp;amp; \mu _ {n,3}\\ \vdots  &amp;amp; \vdots  &amp;amp; \vdots  &amp;amp; \ddots  &amp;amp; \vdots \\ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; \cdots  &amp;amp; 1 \end{pmatrix}\\  &amp;amp; = QR \end{aligned} $$
従って，$$  \displaystyle \begin{aligned} \det \Lambda &amp;amp; = \sqrt{\det ( ^ t\!BB)}\\ &amp;amp; = \sqrt{\det ( ^ t\!R ^ t\!QQR)}\\ &amp;amp; = \sqrt{\det ( ^ t\!QQ)}\\ &amp;amp; = \prod _ {i = 1} ^ n |b _ i ^ * | \end{aligned} $$
よって示された．$  ■ $&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定義 4.2:&lt;/strong&gt;
格子 $  \Lambda $ の基底を $  \left\{b _ 1,\cdots,b _ n\right\} $ とする．この時次の式で定義される量 $  \delta $ を&lt;strong&gt;直交欠陥&lt;/strong&gt;と言う．$$  \displaystyle \delta = \frac{\prod  ^ {n} _ {i=1} | b _ {i} | }{\det \Lambda } $$$  \det \Lambda $ は，スパンの直交化した基底ベクトルのノルムの総乗でした．そのため直交欠陥は，元の基底がどのくらい直交していないかを表す指標となります．また，元のベクトルが直交していた場合，グラム・シュミットの直交化法を行っても基底は変わらないので直交欠陥は $  1 $ になります．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定理 4.3:&lt;/strong&gt;
格子 $  \Lambda $ の直交欠陥 $  \delta $ について次の式が成り立つ．$$  \delta \geq 1 $$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;証明:&lt;/strong&gt;
$  \Lambda $ の基底を $  \left\{b _ 1,b _ 2,\cdots,b _ n\right\} $ とし，そのグラムシュミットベクトルを $  b _ 1 ^ *,\cdots,b _ n ^ * $ とする．この時，自然数 $  1 \leq i \leq n $ に対し $  | b _ i ^ * | \leq | b _ i | $ なので，$  | b _ 1 ^ * | | b _ 2 ^ * | \cdots | b _ n ^ * | \leq |b _ 1| |b _ 2| \cdots |b _ n| $ となる． 従って定理4.2より， $  \det \Lambda \leq \prod  ^ {n} _ {i=1} | b _ {i} | $ となる． $  ■ $&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;5-lagrangeの方法&#34;&gt;5. Lagrangeの方法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;定義 5.1:&lt;/strong&gt;
格子の基底 $  \left\{ b _ 1, b _ 2 \right\} \in \mathbb{R} ^ {m \times 2} $ が任意の $  x \in \mathbb{Z} $ に対し次の条件を満たすとき，&lt;strong&gt;簡約されている&lt;/strong&gt;という．$$  |b _ 1| \leq |b _ 2| \leq |b _ 2+xb _ 1| $$ また，簡約されている基底のことを&lt;strong&gt;簡約基底&lt;/strong&gt;と呼ぶ．ある格子の簡約基底は，同じ格子を張るような基底の中で直交欠陥が最も $  1 $ に近く，各ベクトルが短い基底です．また，ある格子が与えられたときその簡約基底を求めることを&lt;strong&gt;簡約化&lt;/strong&gt;と言います．基底の簡約化は次のような性質から，最も長さの短い格子ベクトルの計算に用いられます．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定理 5.1:&lt;/strong&gt;
二次元の格子 $  \Lambda $ の簡約基底を $  \left\{b _ 1,b _ 2\right\} \in \mathbb{R} ^ {m \times 2} $ とし，逐次最小を $  \lambda _ 1,\lambda _ 2 $ とする．この時次の式が成り立つ．$$  |b _ 1| = \lambda _ 1,\ |b _ 2| = \lambda _ 2 $$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;証明:&lt;/strong&gt;
適当な格子ベクトル $  v = l _ 1b _ 1 + l _ 2b _ 2 \neq 0 $ を考える． $  l _ 2 = 0 $ なら $  |v| \geq |b _ 1| $ となり，また $  l _ 2 \neq 0 $ の時は， $  l _ 1 = ql _ 2 + r,\ q,r \in \mathbb{Z},\ 0 \leq r &amp;lt; |l _ 2| $ と書けば $  v = rb _ 1 + l _ 2(b _ 2 + qb _ 1) $ である．従って，$$  \displaystyle \begin{aligned} |v| &amp;amp;\geq |l _ 2||b _ 2 + qb _ 1| - r|b _ 1|\\ &amp;amp;= (|l _ 2| - r)|b _ 2+qb _ 1|  + r(|b _ 2 + qb _ 1| - |b _ 1|)\\ &amp;amp;\geq |b _ 2 + qb _ 1|\\ &amp;amp;\geq |b _ 2| \geq |b _ 1| \end{aligned} $$よって示された． $ ■ $&lt;/p&gt;
&lt;p&gt;簡約であることと同値な次の条件を考えれば，具体的にどんなベクトルによって構成されるか考えやすくなると思います．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定理 5.2:&lt;/strong&gt;
二次元の格子 $  \Lambda $ の基底 $  \left\{b _ 1,b _ 2 \right\} \in \mathbb{R} ^ {m \times 2} $ が簡約基底であるための必要十分条件は次の式を満たすことである．$$  |b _ 1| \leq |b _ 2| \leq |b _ 2 \pm b _ 1| $$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;証明:&lt;/strong&gt;
まず $  b _ 1,b _ 2 $ が簡約されていると仮定する．定義5.1において $  x = \pm 1 $ とすれば $  |b _ 1| \leq |b _ 2| \leq |b _ 2 \pm b _ 1| $ ．
次に $  b _ 1,b _ 2 $ が $  |b _ 1| \leq |b _ 2| \leq |b _ 2 \pm b _ 1| $ を満たすと仮定する．ここで，関数 $  f(\mu) = |b _ 2 + \mu b _ 1 | ^ 2 = |b _ 2| ^ 2 - 2\mu \langle b _ 1,b _ 2 \rangle + \mu ^ 2|b _ 1| ^ 2 $ の最小値が $  -1 &amp;lt; \mu &amp;lt; 1 $ の時取られることを考えれば， $  f(\mu) $ は二次関数なので $  |x| &amp;gt; 1 $ を満たす整数 $  x $ に対し $  f(0) \leq f(x) $ となり，同じ $  x $ に対し $  |b _ 2| \leq |b _ 2 + xb _ 1 | $ となる．従って仮定より任意の $  x \in \mathbb{Z} $ に対し $  |b _ 1| \leq |b _ 2| \leq |b _ 2 + xb _ 1| $ が成り立つ．よって示された． $ ■ $&lt;/p&gt;
&lt;p&gt;基底の簡約化は一般には難しい問題です．ところが二次元の場合は，厳密解が多項式時間で求まるLagrangeの方法というアルゴリズムが存在し，具体的には次のような操作で簡約することができます．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mitsu1119.github.io/blog/lagrange.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;lagrange&#34;
	
	
&gt;
$  7 $ 行目の $  \mu _ {2, 1} $ は， $  |b _ 2 - \mu _ {2,1}b _ 1 | ^ 2 $ が最小となるような $  b _ 1 $ の係数を設定していることに注意してください． $  \mu _ {2,1} $ の最小値は，下に凸な二次関数 $  |b _ 2 - \mu _ {2,1}b _ 1 | ^ 2 = |b _ 2| ^ 2 - 2\mu _ {2,1} \langle b _ 1,b _ 2 \rangle + \mu _ {2,1} ^ 2|b _ 1| ^ 2 $ の最小値でもあるので，適当に微分して $  -2\langle b _ {1} ,b _ {2} \rangle +2\mu _ {2,1} | b _ {1} |  ^ {2} =0 $ の解を求めれば $  \mu _ {2, 1} = \langle b1, b2 \rangle / |b _ 1| ^ 2 $ が導けます．つまり，二つのベクトルの差のノルムができるだけ短くなるように計算しているだけです．&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;6-lll簡約基底とサイズ簡約&#34;&gt;6. LLL簡約基底とサイズ簡約&lt;/h2&gt;
&lt;p&gt;Lagrangeの方法は，二次元の格子の簡約しかできない代わりに厳密解が求まるアルゴリズムでした．それに対しLLL(Lenstra–Lenstra–Lovász)アルゴリズムは，一般の次元に対して簡約基底の近似が行えます．ということで，そもそもの簡約基底の近似とはどういったものなのかちゃんと定義しておきます．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定義 6.1:&lt;/strong&gt;
格子 $  \Lambda $ の基底 $  \left\{ b _ 1,\cdots,b _ n \right\} \in \mathbb{R} ^ {m \times n} $ とそのグラムシュミットベクトル $  b _ 1 ^ *,\cdots,b _ n ^ * \in \mathbb{R} ^ {m \times n} $ について，ある $  \delta \in \mathbb{R}\ (\frac{1}{4} &amp;lt; \delta &amp;lt; 1) $ を用いて次の条件が成り立つとき，基底がパラメータ $  \delta $ で&lt;strong&gt;LLL簡約されている&lt;/strong&gt;という．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自然数 $  1 \leq j &amp;lt; i \leq n $ について $  |\mu _ {i,j}| \leq \frac{1}{2} $  (サイズ簡約)&lt;/li&gt;
&lt;li&gt;自然数 $  1 \leq i&amp;lt; n $ について $  (\delta - \mu _ {i+1, i} ^ 2)|b _ i ^ *| ^ 2 \leq |b _ {i+1} ^ *| ^ 2 $  (Lovászの条件)&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;一つ目の条件はLLL以外の格子アルゴリズムでも度々出てくる重要な条件で，これ満たす基底は&lt;strong&gt;サイズ簡約されている&lt;/strong&gt;と言います．また二つ目の条件はLovászの条件と呼ばれ，これのおかげで簡約の定義の強さを緩めることができます．&lt;/p&gt;
&lt;p&gt;次に，格子の基底が与えられたとき，グラムシュミットベクトルを変えないようにサイズ簡約された基底を作るアルゴリズムを示します．これを使えばサイズ簡約の条件を簡単に達成できます．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mitsu1119.github.io/blog/size_reduction.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;size_reduction&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;補題 6.1:&lt;/strong&gt;
格子 $  \Lambda $ の基底を $  \left\{b _ 1,\cdots,b _ n \right\} \in \mathbb{R} ^ {m \times n} $ とし，そのグラムシュミット係数を $  \mu _ {i,j}\ (1\leq j &amp;lt; i \leq n) $ ，グラムシュミットベクトルを $  b _ 1 ^ *,\cdots,b _ n ^ * $ とする．また，Algorithm 3でこの格子の基底をサイズ簡約したとき得られるベクトルの組を $  \left\{ b _ 1&#39;,\cdots,b _ n&#39; \right\} $ とし，二重ループの内側でベクトルを張りなおした時のベクトルの組を $  1 \leq j &amp;lt; i \leq n $ に対して $  { b _ {i,j,1}&#39;,\cdots,b _ {i,j,n}&#39; } $ とする．つまり $  b _ {i,j,i}&#39; = b _ i - \lfloor \mu _ {i,j} \rceil b _ {j} ,\ b _ {k} &#39;=b _ {k} \ ( k\neq i) $ ．
また， $  { b _ {i,j,1}&#39;,\cdots,b _ {i,j,n}&#39; } $ のグラムシュミットベクトルを $  b _ {i,j,1}&#39; ^ *,\cdots,b _ {i,j,n}&#39; ^ * $ とし，そのグラムシュミット係数を $  \nu _ {i,j,k,l} \ ( 1\leq l&amp;lt; k\leq n) $ としたとき，次の式が成り立つ．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自然数 $  1 \leq k \leq n $ に対し $  b ^ {\prime *} _ {i,j,k} =b ^ {*} _ {k} $&lt;/li&gt;
&lt;li&gt;自然数 $  1 \leq l \leq j $ に対し $  \nu _ {i,j,i,l} =\mu _ {i,l} -\lfloor \mu _ {i,j} \rceil \mu _ {j,l} $ で，特に $  |\nu _ {i,j,i,j} |\leq \frac{1}{2} $ となる．&lt;/li&gt;
&lt;li&gt;その他のグラムシュミット係数に変化はない．&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;証明:&lt;/strong&gt;
一つ目の式は $  \mathrm{span}( b _ {k} ,\cdots ,b _ {n}) $ 及び $  \mathrm{span}( b&#39; _ {i,j,k} ,\cdots ,b _ {i,j,n}) $ への射影を考えれば明らかなので，二つ目の式のみ示す．
定義より，$$  \displaystyle \nu _ {i,j,i,l} = \frac{\langle b&#39; _ {i,j,i} ,b ^ {\prime *} _ {i,j,l} \rangle }{\langle b ^ {\prime *} _ {i,j,l} ,b ^ {\prime *} _ {i,j,l} \rangle }=\frac{\langle b _ {i} -\lfloor \mu _ {i,j} \rceil b _ {j} ,b ^ {*} _ {l} \rangle }{| b ^ {*} _ {l} |  ^ {2}}=\mu _ {i.l} -\lfloor \mu _ {i,j} \rceil \mu _ {j,l} $$である． $  |\nu _ {i,j,i,j} |=|\mu _ {i.j} -\lfloor \mu _ {i,j} \rceil \mu _ {j,j} |=|\mu _ {i,j} -\lfloor \mu _ {i,j} \rceil | $ なので，四捨五入の性質より $   |\nu _ {i,j,i,j} | \leq \frac{1}{2} $ が成り立つ．
また，その他のグラムシュミット係数が変化しないことは $  b _ {i,j,k} &#39;=b _ {k} \ ( k\neq i) $ より明らかである． $ ■ $&lt;/p&gt;
&lt;p&gt;補題6.1より，Algorithm 3の正当性を確認することができました．また，補題6.1の1つ目の式から，Algorithm 3の6行目の処理は2つ目の式を使ってグラムシュミット係数のみ計算すればいいことがわかります．しかしここでは簡単のため，グラム・シュミットの直交化をするようにしています．この部分の最適化は，LLLの説明が終わった後の最適化の部分に纏めて書いてあるので安心してください．&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;7-lovászの条件&#34;&gt;7. Lovászの条件&lt;/h2&gt;
&lt;p&gt;LLL簡約のLovászの条件は， $  |b _ {i+1} ^ *| ^ 2 + \mu _ {i+1, i} ^ 2 |b _ i ^ *| ^ 2 = |b _ {i+1} ^ * + \mu _ {i+1,i}b _ i ^ *| ^ 2 $ より次のような式に書き換えることもできます．$$  \delta |b _ i ^ *| ^ 2 \leq  |b _ {i+1} ^ * + \mu _ {i+1,i}b _ i ^ *| ^ 2 $$ここで正射影 $  \pi _ i: \mathbb{R} ^ m \to  \mathrm{span}( b _ i ^ * , \cdots  , b _ n ^ * ) $ を考えてみます．具体的には$$  \displaystyle \pi _ i(x) = \sum _ {j=i} ^ n \frac{\langle x,b _ j ^ * \rangle}{\langle b _ j ^ *,b _ j ^ * \rangle}b _ j ^ * $$となります．これを用いればLovászの条件は， $  \delta |\pi _ i(b _ i)| ^ 2 \leq |\pi _ i(b _ {i+1})| ^ 2 $ となることがわかります．この式からもわかるように，この条件は，基底の簡約の条件 $  b _ i \leq b _ {i+1} $ を $  \delta $ を用いて緩和したものと同じようなものになります．
また，サイズ簡約の条件より， $  \alpha = \frac{1}{\delta - 1 / 4} $ としたとき自然数 $  1 \leq j \leq i \leq n $ について$$  |b _ j ^ *| ^ 2 \leq \alpha ^ {i-j}|b _ i ^ *| ^ 2 $$となります．この式はLovászの条件がどの程度簡約の条件を緩めるかを意味するものになっています．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定理 7.1:&lt;/strong&gt;
格子 $  \Lambda $ の基底行列を $  B=\begin{pmatrix} b _ {1} &amp;amp; \cdots  &amp;amp; b _ {n} \end{pmatrix} \in \mathbb{R} ^ {m \times n} $ とし，そのグラムシュミットベクトルによる行列を $  B ^ *=\begin{pmatrix} b _ {1} ^ * &amp;amp; \cdots  &amp;amp; b _ {n} ^ * \end{pmatrix} $ とする．この時，格子 $  \Lambda $ の逐次最小 $  \lambda _ 1 $ について次の不等式が成り立つ．$$  \lambda _ 1 \geq  \min _ i |b _ i ^ *| $$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;証明:&lt;/strong&gt;
$  \displaystyle \lambda _ 1 \in \left\{ |Bx| \mathrel{}\middle|\mathrel{} x \in \mathbb{Z} ^ n \setminus \left\{0\right\} \right\} $ なので，任意の $  x = \begin{pmatrix} x _ {1} &amp;amp; \cdots  &amp;amp; x _ {n} \end{pmatrix} \in \mathbb{Z} ^ n \setminus \left\{0\right\} $ に対し $  |Bx| \geq \min _ i |b _ i ^ *| $ を示せばよい．
まず $  k $ を $  x _ k \neq 0 $ となる $  x $ の最大のインデックスとする．この時 $  Bx $ と $  b _ k ^ * $ の内積は$$  \displaystyle \begin{aligned} \langle Bx,b ^ {*} _ {k} \rangle  &amp;amp; =\langle \sum  ^ {k} _ {i=1} x _ {i} b _ {i} ,b ^ {*} _ {k} \rangle \\ &amp;amp; =\sum  ^ {k} _ {i=1} \langle x _ {i} b _ {i} ,b ^ {*} _ {k} \rangle \\ &amp;amp; =\langle x _ {k} b _ {k} ,b ^ {*} _ {k} \rangle \\ &amp;amp; =x _ {k} | b ^ {*} _ {k} |  ^ {2}  \end{aligned} $$となる．よってコーシー・シュワルツの不等式より，$$  |Bx| |b _ k ^ *| \geq | \langle Bx, b _ k ^ * \rangle | = |x _ k| |b _ k ^ *| ^ 2 $$となり， $  |x _ k| \geq 1 $ より $  |Bx| \geq |b _ k ^ *| \geq \min _ i |b _ i ^ *| $ が成り立つ．よって示された． $ ■ $&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定理 7.2:&lt;/strong&gt;
パラメータ $  \delta $ でLLL簡約された基底 $  \left\{b _ 1,\cdots,b _ n \right\} $ とそのグラムシュミットベクトル $  b _ 1 ^ *,\cdots,b _ n ^ *  $ について， $  \alpha = \frac{1}{\delta - 1/4} $ としたとき， $  1 \leq j \leq i \leq n $ を満たす任意の自然数 $  i,j $ に対して次の不等式が成り立つ．$$  \displaystyle |b _ j| \leq \alpha ^ {(i-1)/2}|b _ i ^ *| $$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;証明:&lt;/strong&gt;
まず， $  |b _ i| ^ 2\ (1 \leq i \leq n) $ に対して次の式が成り立つ．$$  \displaystyle \begin{aligned} | b _ {i} |  ^ {2} &amp;amp; =\langle b _ {i} ,b _ {i} \rangle \\ &amp;amp; =\langle b ^ {*} _ {i} +\sum  ^ {i-1} _ {j=1} \mu _ {i,j} b ^ {*} _ {j} ,b ^ {*} _ {i} +\sum  ^ {i-1} _ {j=1} \mu _ {i,j} b ^ {*} _ {j} \rangle \\ &amp;amp; =| b ^ {*} _ {i} | ^ 2 +\sum  ^ {i-1} _ {j=1} \mu  ^ {2} _ {i,j} | b ^ {*} _ {j} |  ^ {2} \end{aligned} $$よって， $  |b _ j ^ *| ^ 2 \leq \alpha ^ {i-j}|b _ i ^ *| ^ 2 $ とサイズ簡約の条件を用いれば$$  \displaystyle \begin{aligned} | b _ {i} |  ^ {2} &amp;amp; \leq | b ^ {*} _ {i} |  ^ {2} +\frac{1}{4}\sum  ^ {i-1} _ {j=1} \alpha  ^ {i-j} | b _ {i} |  ^ {2}\\ &amp;amp; =| b ^ {*} _ {i} |  ^ {2} +\frac{1}{4} | b _ {i} |  ^ {2}\frac{\alpha  ^ {i} -\alpha }{\alpha -1} \end{aligned} $$となる．従って， $  \displaystyle | b _ {i} |  ^ {2} \leq | b ^ {*} _ {i} |  ^ {2}\left( 1+\frac{1}{4}\frac{\alpha  ^ {i} -\alpha }{\alpha -1}\right) $ が成り立つ．
ここで $  j \geq 1 $ とすると $  \displaystyle 1+\frac{1}{4}\frac{\alpha  ^ {j} -\alpha }{\alpha -1} \leq \alpha  ^ {j-1} $ なので， $  1 \leq j \leq i \leq n $ に対して$$  \displaystyle \begin{aligned} | b _ {j} |  ^ {2} &amp;amp; \leq \alpha  ^ {j-1} | b ^ {*} _ {j} |  ^ {2}\\ &amp;amp; \leq \alpha  ^ {j-1} \alpha  ^ {i-j} | b ^ {*} _ {i} |  ^ {2}\\ &amp;amp; =\alpha  ^ {i-1} | b ^ {*} _ {i} |  ^ {2} \end{aligned} $$従って $  \displaystyle | b _ {j} | \leq \alpha  ^ {( i-1) /2} | b ^ {*} _ {i} |  $ が得られる．$ ■ $&lt;/p&gt;
&lt;p&gt;これらの定理より，LLLによる最短格子ベクトルの近似の精度を与える不等式が得られます．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定理 7.3:&lt;/strong&gt;
格子 $  \Lambda $ の，パラメータ $  \delta $ によるLLL簡約基底 $  \left\{ b _ 1, \cdots, b _ n \right\} $ と逐次最小 $  \lambda _ 1 $ について， $  \alpha = \frac{1}{\delta - 1/4} $ としたとき次の不等式が成り立つ．$$  \displaystyle |b _ 1| \leq \alpha ^ {(n-1)/2}\lambda _ 1 $$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;証明:&lt;/strong&gt;
$  1 \leq i \leq n $ なる自然数 $  i $ について，定理7.2より$$  \displaystyle \alpha  ^ {( 1-i) /2} | b ^ {*} _ {1} | \leq \ | b ^ {*} _ {i} |  $$したがって，定理7.1より$$  \displaystyle \begin{aligned} \lambda _ {1} &amp;amp; \geq \min _ i | b ^ {*} _ {i} | \\ &amp;amp; \geq \min _ i \alpha  ^ {( 1-i) /2} | b ^ {*} _ {1} | \\ &amp;amp; =\alpha  ^ {( 1-n) /2} | b ^ {*} _ {1} |  \end{aligned} $$従って， $  b _ 1 ^ * = b _ 1 $ より $ | b _ {1} | \leq \alpha  ^ {( n-1) /2} \lambda _ {1} $ が得られる． $ ■ $&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定理 7.4:&lt;/strong&gt;
格子 $  \Lambda $ の，パラメータ $  \delta $ によるLLL簡約基底 $  \left\{ b _ 1, \cdots, b _ n \right\} $ について， $  \alpha = \frac{1}{\delta - 1/4} $ としたとき次の不等式が成り立つ．$$  |b _ 1| \leq \alpha ^ {(n-1)/4} \det( \Lambda)  ^  {1/n} $$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;証明:&lt;/strong&gt;
定理7.2より，$$  \displaystyle \begin{aligned} \begin{aligned} | b _ {1} |  ^ {n} \end{aligned} &amp;amp; \leq \prod  ^ {n} _ {i=1} \alpha  ^ {( i-1) /2} | b ^ {*} _ {i} | \\ &amp;amp; =\alpha  ^ {n( n-1) /4}\det \Lambda \end{aligned} $$である．従って， $  | b _ {1} | \leq \alpha  ^ {( n-1) /4}\det( \Lambda ) ^ {1/n} $ ． $ ■ $&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;8-lll簡約と計算量&#34;&gt;8. LLL簡約と計算量&lt;/h2&gt;
&lt;p&gt;遂にLLL簡約です．といってもここまで読めた方にとってはあまり難しくないと思います．実はLLLアルゴリズムは意外と単純で，サイズ簡約した後Lovászの条件を満たすか確認し，もし満たさなかったときはそのベクトルの組を入れ替えてやり直すことを繰り返すアルゴリズムなのです．
下に愚直な疑似コードを示します．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mitsu1119.github.io/blog/lll_1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;lll_1&#34;
	
	
&gt;
さすがに愚直が過ぎるので，ある程度無駄な計算を省いたものとして下のコードも示しておきます．主な解析はこっちのコードで行います．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mitsu1119.github.io/blog/lll_2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;lll_2&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;補題 8.1:&lt;/strong&gt;
Algorithm 5の12行目にて，ベクトル $  b _ k $ と $  b _ {k-1} $ をを交換する前の基底を $  \left\{b _ 1,\cdots,b _ n\right\} $ ，交換した直後の基底を $  \left\{b _ 1&#39;,\cdots,b _ n&#39;\right\} $ とし，それぞれのグラムシュミットベクトルを $  b _ 1 ^ *,\cdots,b _ n ^ * $ 及び $  b _ 1&#39; ^ *,\cdots,b _ n&#39; ^ * $ とする．このとき，次の式が成り立つ．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$  n $ 以下の自然数 $  i \neq k,k-1 $ に対し， $  b _ {i}  ^ {\prime *} =b ^ {*} _ {i} $&lt;/li&gt;
&lt;li&gt;$  \displaystyle b ^ {\prime *} _ {k-1} =b ^ {*} _ {k} +\mu _ {k,k-1} b ^ {*} _ {k-1} ,\ | b ^ {\prime *} _ {k-1} |  ^ {2} =| b ^ {*} _ {k} |  ^ {2} +\mu  ^ {2} _ {k,k-1} | b ^ {*} _ {k-1} |  ^ {2} $&lt;/li&gt;
&lt;li&gt;$  \displaystyle b ^ {\prime *} _ {k} =\frac{| b ^ {*} _ {k} |  ^ {2}}{| b ^ {\prime *} _ {k-1} |  ^ {2}} b ^ {*} _ {k-1} -\mu _ {k,k-1} \frac{| b ^ {*} _ {k-1} |  ^ {2}}{| b ^ {\prime *} _ {k-1} |  ^ {2}} b ^ {*} _ {k} ,\ | b ^ {\prime *} _ {k} |  ^ {2} =\frac{| b ^ {*} _ {k-1} |  ^ {2} | b ^ {*} _ {k} |  ^ {2}}{| b ^ {\prime *} _ {k-1} |  ^ {2}} $
&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;証明:&lt;/strong&gt;
自然数 $  1 \leq j &amp;lt; i \leq n $ に対し，グラムシュミットベクトル $  b _ 1 ^ *,\cdots,b _ n ^ * $ のグラムシュミット係数を $  \mu _ {i,j} $ ， $  b _ 1&#39; ^ *,\cdots,b _ n&#39; ^ * $ のグラムシュミット係数を $  \mu _ {i,j}&#39; $ とする．
$  b _ k $ と $  b _ {k-1} $ を交換しただけなので一つ目の式は明らかに成り立ち，また自然数 $  1 \leq j &amp;lt; i &amp;lt; k-1 $ に対して $  \mu _ {i,j}&#39; = \mu _ {i,j} $ である．
また， $  b ^ {\prime *} _ {k-1} $ について$$  \displaystyle \begin{aligned} b ^ {\prime *} _ {k-1} &amp;amp; =b ^ {\prime } _ {k-1} -\sum  ^ {k-2} _ {j=1} \mu  ^ {\prime } _ {k-1,j} b ^ {\prime *} _ {j}\\ &amp;amp; =b _ {k} -\sum  ^ {k-2} _ {j=1} \mu _ {k,j} b ^ {*} _ {j}\\ &amp;amp; =b ^ {*} _ {k} +\mu _ {k,k-1} b ^ {*} _ {k-1} \end{aligned} $$なので，そのノルムについて， $  | b ^ {\prime *} _ {k-1} |  ^ {2} =\langle b ^ {*} _ {k} +\mu _ {k,k-1} b ^ {*} _ {k-1} ,b ^ {*} _ {k} +\mu _ {k,k-1} b ^ {*} _ {k-1} \rangle =| b ^ {*} _ {k} |  ^ {2} +\mu  ^ {2} _ {k,k-1} | b ^ {*} _ {k-1} |  ^ {2} $ となる．
また， $  b ^ {\prime *} _ {k} $ について$$  \displaystyle \begin{aligned} b ^ {\prime *} _ {k} &amp;amp; =b ^ {\prime } _ {k} -\sum  ^ {k-1} _ {j=1} \mu  ^ {\prime } _ {k,j} b ^ {\prime *} _ {j}\\ &amp;amp; =b _ {k-1} -\sum  ^ {k-2} _ {j=1} \mu _ {k-1,j} b ^ {*} _ {j} -\mu  ^ {\prime } _ {k,k-1} b ^ {\prime *} _ {k-1}\\ &amp;amp; =b ^ {*} _ {k-1} -\frac{\langle b _ {k-1} ,b ^ {\prime *} _ {k-1} \rangle }{| b ^ {\prime *} _ {k-1} |  ^ {2}} b ^ {\prime *} _ {k-1}\\ &amp;amp; =b ^ {*} _ {k-1} -\frac{\langle b _ {k-1} ,b ^ {*} _ {k} +\mu _ {k,k-1} b ^ {*} _ {k-1} \rangle }{| b ^ {\prime *} _ {k-1} |  ^ {2}}\left( b ^ {*} _ {k} +\mu _ {k,k-1} b ^ {*} _ {k-1}\right)\\ &amp;amp; =b ^ {*} _ {k-1} -\frac{\mu _ {k,k-1} | b ^ {*} _ {k-1} |  ^ {2}}{| b ^ {\prime *} _ {k-1} |  ^ {2}}\left( b ^ {*} _ {k} +\mu _ {k,k-1} b ^ {*} _ {k-1}\right)\\ &amp;amp; =\frac{| b ^ {\prime *} _ {k-1} |  ^ {2} -\mu  ^ {2} _ {k,k-1} | b ^ {*} _ {k-1} |  ^ {2}}{| b ^ {\prime *} _ {k-1} |  ^ {2}} b ^ {*} _ {k-1} -\frac{\mu _ {k,k-1} | b ^ {*} _ {k-1} |  ^ {2}}{| b ^ {\prime *} _ {k-1} |  ^ {2}} b ^ {*} _ {k}\\ &amp;amp; =\frac{| b ^ {*} _ {k} |  ^ {2}}{| b ^ {\prime *} _ {k-1} |  ^ {2}} b ^ {*} _ {k-1} -\mu _ {k,k-1}\frac{| b ^ {*} _ {k-1} |  ^ {2}}{| b ^ {\prime *} _ {k-1} |  ^ {2}} b ^ {*} _ {k} \end{aligned} $$が成り立つため，そのノルムについて$$   \displaystyle \begin{aligned} | b ^ {\prime *} _ {k} |  &amp;amp; =\frac{| b ^ {*} _ {k} |  ^ {4} | b ^ {*} _ {k-1} |  ^ {2}}{| b ^ {\prime *} _ {k-1} |  ^ {4}} +\mu  ^ {2} _ {k,k-1}\frac{| b ^ {*} _ {k-1} |  ^ {4} | b ^ {*} _ {k} |  ^ {2}}{| b ^ {\prime *} _ {k-1} |  ^ {4}}\\ &amp;amp; =\frac{| b ^ {*} _ {k-1} |  ^ {2} | b ^ {*} _ {k} |  ^ {2}}{| b ^ {\prime *} _ {k-1} |  ^ {4}}\left( | b ^ {*} _ {k} |  ^ {2} +\mu  ^ {2} _ {k,k-1} | b ^ {*} _ {k-1} |  ^ {2}\right)\\ &amp;amp; =\frac{| b ^ {*} _ {k-1} |  ^ {2} | b ^ {*} _ {k} |  ^ {2}}{| b ^ {\prime *} _ {k-1} |  ^ {2}} \end{aligned} $$となる．よって示された． $ ■ $&lt;/p&gt;
&lt;p&gt;補題8.1より，元の基底のベクトル $  b _ k $ と $  b _ {k-1} $ がLovászの条件を満たさなかったとき， $  | b ^ {*} _ {k} |  ^ {2} &amp;lt; ( \delta -\mu  ^ {2} _ {k,k-1}) | b ^ {*} _ {k-1} |  ^ {2} $ なので，これを交換して得られた基底 $  \left\{ b _ 1 ^ {\prime},\cdots,b _ n ^ {\prime} \right\} $ について $  |b _ {k-1} ^ {\prime *}| ^ 2 &amp;lt; \delta |b _ {k-1} ^ *| ^ 2 $ が成り立ちます．よって，Lovászの条件を満たさない基底ベクトル $  b _ k,b _ {k-1} $ の交換は， $  |b _ {k-1} ^ *| ^ 2 $ を少なくとも $  \delta $ 倍だけ短くする操作と同じものになります．
では次にLLLの計算量を考えます．ただ， $  \mathbb{R} ^ n $ 内の任意の格子に対する具体的な計算量を証明することができなかったので，整数格子限定の計算量しか解説できません．ごめんなさい……(てか既に厳密な計算量が与えられてるかすらわからなかったのです．強い人どうか教えてください)
まずはLLLの停止性について次の定理が言えます．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定理 8.2:&lt;/strong&gt;
格子 $  \Lambda $ の基底を $  \left\{ b _ 1,\cdots,b _ n \right\} \in \mathbb{Z} ^ {m \times n} $ とし， $  X = \max _ i |b _ i| ^ 2 $ とする．この時，Algorithm5で示される，パラメータ $  \delta $ によるLLLのwhile文中の処理は $  O\left( n ^ {2}\log X\right) $ 程度の回数で停止する．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;証明:&lt;/strong&gt;
$  \left\{ b _ 1,\cdots,b _ n \right\} $ のグラムシュミットベクトルを $  b _ 1 ^ *,\cdots,b _ n ^ * $ とする．
いま，自然数 $  1 \leq i &amp;lt; n $ に対し $  B _ {i} =\begin{pmatrix} b _ {1} &amp;amp; \cdots  &amp;amp; b _ {i} \end{pmatrix} \in \mathbb{Z} ^ {i \times m} $ とし， $  d _ i = \det\left({} ^ t!B _ iB _ i\right) $ と置く． $  B _ i $ は整数行列なので $  d _ i \in \mathbb{Z} $ となり，また定理4.2より次の式が成り立つ．&lt;!-- raw HTML omitted --&gt; $  \displaystyle
d _ {i} =\prod  ^ {i} _ {j=1} | b ^ {*} _ {i} |  ^ {2} \leq \prod  ^ {i} _ {j=1} | b _ {i} |  ^ {2} \leq X ^ {i} $ &lt;!-- raw HTML omitted --&gt;ここで，&lt;!-- raw HTML omitted --&gt; $  \displaystyle
D=\prod  ^ {n-1} _ {i=1} d _ {i} =\prod  ^ {n-1} _ {i=1} | b ^ {*} _ {i} |  ^ {n-i} $ &lt;!-- raw HTML omitted --&gt;としたとき，定義より次の式が成り立つ．&lt;!-- raw HTML omitted --&gt; $  \displaystyle
D=\prod  ^ {n-1} _ {i=1} | b ^ {*} _ {i} |  ^ {n-i} \leq \prod  ^ {n-1} _ {i=1} X ^ {n-i} =X ^ {n( n-1) /2} $ &lt;!-- raw HTML omitted --&gt;ところで，Algorithm5において元の基底のベクトル $  b _ k,b _ {k-1} $ がLovászの条件を満たさず，この二つを交換して新しい基底 $  \left\{ b _ 1 ^ {\prime},\cdots,b _ n ^ {\prime} \right\} $ を作ったとする．この基底のグラムシュミットベクトルを $  b _ 1 ^ {\prime *},\cdots,b _ n ^ {\prime *} $ とし，新しい基底に対する $  d _ i $ を $  d _ i ^ {\prime} $ とすれば，補題8.1より自然数 $  1 \leq i &amp;lt; k-1 $ に対して $  d _ i ^ {\prime} = d _ i $ となる．さらにベクトルの交換により $  |b _ {k-1} ^ {\prime *}| ^ 2 \leq \delta |b _ {k-1} ^ *| ^ 2 $ なので $  d _ {k-1} ^ {\prime} \leq \delta d _ {k-1} $ となり，また $  |b _ {k-1} ^ {\prime *}| ^ 2 |b _ k ^ {\prime *}| ^ 2 = |b _ {k-1} ^ *| ^ 2 |b _ k ^ *| ^ 2 $ より，自然数 $  k \leq i \leq n $ に対して $  d _ i ^ {\prime} = d _ i $ である．従って，基底ベクトルの交換により $  D $ の値も少なくとも $  \delta $ 倍小さくなることがわかる．ゆえに，Algorithm5における基底ベクトルの交換の回数を $  N $ とすれば $  1 \leq \delta ^ N D $ なので，&lt;!-- raw HTML omitted --&gt; $  \displaystyle N\leq \log _ {\delta }\frac{1}{D} =\log _ {1/\delta } D\leq \log _ {1/\delta }\left( X ^ {n( n-1) /2}\right) =\frac{n( n-1)}{2}\log _ {1/\delta } X $ &lt;!-- raw HTML omitted --&gt;となる．これより，基底ベクトルの交換の回数 $  N $ は $  O\left( n ^ {2}\log X\right) $ 程度である．よって示された． $ ■ $&lt;/p&gt;
&lt;p&gt;定理8.2を使えば，最終的なLLL(Algorithm 5)の計算量が簡単に求まります．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定理 8.3:&lt;/strong&gt;
格子 $  \Lambda $ の基底を $  \left\{ b _ 1,\cdots,b _ n \right\} \in \mathbb{Z} ^ {m \times n} $ とし， $  X = \max _ i |b _ i| ^ 2 $ とする．この時，Algorithm5で示される，パラメータ $  1/4 &amp;lt; \delta &amp;lt; 1 $ によるLLL簡約全体の計算量は $  O\left( n ^ {5}m\log X\right) $ となる．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;証明:&lt;/strong&gt;
グラム・シュミットの直交化法の計算量は $  \Theta(n ^ 2m) $ なので，3行目までの初期化の処理の計算量もまた $  \Theta(n ^ 2m) $ である．
また，4行目から15行目の繰り返し回数は定理8.2より $  O(n ^ 2 \log X) $ 程度であった．この中に，5行目から8行目までの $  \Theta(n ^ 3m) $ の処理と，8行目から15行目までの $  \Theta(n ^ 2m) $ の処理が含まれているため，メインのループ全体の計算量は $  O(n ^ 2 \log X \cdot (n ^ 3m + n ^ 2m)) = O(n ^ 5 m \log X) $ となる．
よってAlgorithm 5全体の計算量は $  O(n ^ 2m + n ^ 5 m \log X) = O(n ^ 5 m \log X) $ となる． $ ■ $&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;9-最適化&#34;&gt;9. 最適化&lt;/h2&gt;
&lt;p&gt;この最適化の章の内容は，青野先生と安田先生の『格子暗号解読のための数学的基礎』をかなり参考にさせていただきました．とてもいい本なの全人類読みましょう．&lt;/p&gt;
&lt;p&gt;前にちょこちょこ書いていたように，Algorithm 5のLLLは無駄な計算があります．ということで，上で説明したAlgorithm 5の計算量をもう少し落としてみます．まずは8行目のグラム・シュミットの直交化の部分に注目します．補題6.1より，サイズ簡約を行ったあと出力されるベクトルは変わらないことが保証されているため，ここはグラムシュミット係数を更新するだけで済み，わざわざ直交化までする必要はありません．また，グラムシュミット係数の更新は補題6.1の二つ目の主張を利用すればよく，この部分の計算量を $  \Theta(n ^ 2m) $ から $  \Theta(n) $ まで落とすことができます．具体的には，サイズ簡約を下のようなコードで書けばよいことになります．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mitsu1119.github.io/blog/size_reduction_2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;size_reduction_2&#34;
	
	
&gt;
次に，Algorithm 5の13行目のグラム・シュミットの直交化の部分に注目します．この部分はベクトルの交換が行われるためグラムシュミットベクトルを計算する必要があります．しかしグラム・シュミットの直交化を直接利用する必要はなく，補題8.1と次の補題を用いれば，交換する前の基底を利用して直交化することができます．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;補題 9.1:&lt;/strong&gt;
格子 $  \Lambda $ の基底を $  \left\{ b _ 1,\cdots,b _ n \right\} \in \mathbb{R} ^ {m \times n} $ とし，そのグラムシュミット係数を $  \mu _ {i,j}\ (1 \leq j &amp;lt; i \leq n) $ ，グラムシュミットベクトルを $  b _ 1 ^ *,\cdots,b _ n ^ * $ とする．ここで，ある自然数 $  1 &amp;lt; k \leq n $ に対し $  b _ k, b _ {k-1} $ の組がLovászの条件を満たさず， $  | b ^ {*} _ {k} |  ^ {2} &amp;lt; ( \delta -\mu  ^ {2} _ {k,k-1}) | b ^ {*} _ {k-1} |  ^ {2} $ であったとし，そのベクトルを交換して得られる基底を $  \left\{ b _ 1 ^ {\prime},\cdots,b _ n ^ {\prime} \right\} $ とする．またそのグラムシュミット係数を $  \mu _ {i,j} ^ {\prime}\ (1 \leq j &amp;lt; i \leq n) $ と表し，グラムシュミットベクトルを $  b _ 1 ^ {\prime *},\cdots,b _ n ^ {\prime *} $ とする．この時以下の式が成り立つ．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$  \displaystyle \mu  ^ {\prime} _ {k,k-1} =\frac{\mu _ {k,k-1} | b ^ {*} _ {k-1} |  ^ {2}}{| b ^ {\prime *} _ {k-1} |  ^ {2}} $&lt;/li&gt;
&lt;li&gt;自然数 $  1 \leq j &amp;lt; k-2 $ に対し， $  \mu ^ {\prime} _ {k-1,j} =\mu _ {k,j} ,\ \mu ^ {\prime} _ {k,j} =\mu _ {k-1,j} $&lt;/li&gt;
&lt;li&gt;自然数 $  k+1 \leq j \leq n $ に対し， $  \mu ^ {\prime} _ {j,k} =\mu _ {j,k-1} -\mu _ {k,k-1} \mu _ {j,k} ,\ \mu ^ {\prime} _ {j,k-1} =\mu _ {j,k} +\mu ^ {\prime} _ {k,k-1} \mu ^ {\prime} _ {j,k} $&lt;/li&gt;
&lt;li&gt;上の式の条件に当てはまらないグラムシュミット係数は変化しない．&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;証明:&lt;/strong&gt;
まず， $  \mu _ {k,k-1} ^ {\prime} $ について補題8.1より次の式が成り立つ．$$  \displaystyle  \begin{array}{l} \begin{aligned} \mu  ^ {\prime } _ {k,k-1} &amp;amp; =\frac{\langle b ^ {\prime } _ {k} ,b ^ {\prime *} _ {k-1} \rangle }{\langle b ^ {\prime *} _ {k-1} ,b ^ {\prime *} _ {k-1} \rangle }\\ &amp;amp; =\frac{\langle b _ {k-1} ,b ^ {*} _ {k} +\mu _ {k,k-1} b ^ {*} _ {k-1} \rangle }{| b ^ {\prime *} _ {k-1} |  ^ {2}}\\ &amp;amp; =\frac{\mu _ {k,k-1} \langle b _ {k-1} ,b ^ {*} _ {k-1} \rangle }{| b ^ {\prime *} _ {k-1} |  ^ {2}}\\ &amp;amp; =\frac{\mu _ {k,k-1} | b ^ {*} _ {k-1} |  ^ {2}}{| b ^ {\prime *} _ {k-1} |  ^ {2}} \end{aligned} \end{array} $$また，自然数 $  1 \leq j &amp;lt; k-1 $ について$$  \displaystyle \begin{aligned} \mu  ^ {\prime } _ {k-1,j} &amp;amp; =\frac{\langle b ^ {\prime } _ {k-1} ,b ^ {\prime *} _ {j} \rangle }{| b ^ {\prime *} _ {j} |  ^ {2}}\\ &amp;amp; =\frac{\langle b _ {k} ,b ^ {*} _ {j} \rangle }{| b ^ {*} _ {j} |  ^ {2}}\\ &amp;amp; =\mu _ {k,j} \end{aligned} $$であり， $  \mu ^ {\prime} _ {k,j} $ も同様に，$$  \displaystyle \begin{aligned} \mu  ^ {\prime } _ {k,j} &amp;amp; =\frac{\langle b ^ {\prime } _ {k} ,b ^ {\prime *} _ {j} \rangle }{| b ^ {\prime *} _ {j} |  ^ {2}}\\ &amp;amp; =\frac{\langle b _ {k-1} ,b ^ {*} _ {j} \rangle }{| b ^ {*} _ {j} |  ^ {2}}\\ &amp;amp; =\mu _ {k-1,j} \end{aligned} $$となる．
さらに，自然数 $  k+1 \leq j \leq n $ についても同様に，$$  \displaystyle \begin{aligned} \mu  ^ {&#39;} _ {j,k} &amp;amp; =\frac{\langle b ^ {\prime } _ {j} ,b ^ {\prime *} _ {k} \rangle }{| b ^ {&#39;*} _ {k} |  ^ {2}}\\ &amp;amp; =\frac{\langle b _ {j} ,\frac{| b ^ {*} _ {k} |  ^ {2}}{| b ^ {\prime *} _ {k-1} |  ^ {2}} b ^ {*} _ {k-1} -\mu _ {k,k-1}\frac{| b ^ {*} _ {k-1} |  ^ {2}}{| b ^ {\prime *} _ {k-1} |  ^ {2}} b ^ {*} _ {k} \rangle }{\frac{| b ^ {*} _ {k-1} |  ^ {2} | b ^ {*} _ {k} |  ^ {2}}{| b ^ {\prime *} _ {k-1} |  ^ {2}}}\\ &amp;amp; =\frac{\langle b _ {j} ,| b ^ {*} _ {k} |  ^ {2} b ^ {*} _ {k-1} -\mu _ {k,k-1} | b ^ {*} _ {k-1} |  ^ {2} b ^ {*} _ {k} \rangle }{| b ^ {*} _ {k-1} |  ^ {2} | b ^ {*} _ {k} | }\\ &amp;amp; =\mu _ {j,k-1} -\mu _ {k,k-1} \mu _ {j,k} \end{aligned} $$となり， $  \mu _ {j,k-1} ^ {\prime} $ についても$$  \displaystyle \begin{aligned} \mu  ^ {&#39;} _ {j,k-1} &amp;amp; =\frac{\langle b ^ {\prime } _ {j} ,b ^ {\prime *} _ {k-1} \rangle }{| b ^ {&#39;*} _ {k-1} |  ^ {2}}\\ &amp;amp; =\frac{\langle b _ {j} ,b ^ {*} _ {k} +\mu _ {k,k-1} b ^ {*} _ {k-1} \rangle }{| b ^ {\prime *} _ {k-1} |  ^ {2}}\\ &amp;amp; =\frac{| b ^ {*} _ {k} |  ^ {2} \langle b _ {j} ,b ^ {*} _ {k} \rangle +\mu _ {k,k-1} | b ^ {*} _ {k} |  ^ {2} \langle b _ {j} ,b ^ {*} _ {k-1} \rangle }{| b ^ {\prime *} _ {k-1} |  ^ {2} | b ^ {*} _ {k} |  ^ {2}}\\ &amp;amp; =\frac{\left( | b ^ {\prime *} _ {k-1} |  ^ {2} -\mu  ^ {2} _ {k,k-1} | b ^ {*} _ {k-1} |  ^ {2}\right) \langle b _ {j} ,b ^ {*} _ {k} \rangle +\mu _ {k,k-1} | b ^ {*} _ {k} |  ^ {2} \langle b _ {j} ,b ^ {*} _ {k-1} \rangle }{| b ^ {\prime *} _ {k-1} |  ^ {2} | b ^ {*} _ {k} |  ^ {2}}\\ &amp;amp; =\frac{| b ^ {\prime *} _ {k-1} |  ^ {2} \langle b _ {j} ,b ^ {*} _ {k} \rangle -\mu  ^ {2} _ {k,k-1} | b ^ {*} _ {k-1} |  ^ {2} \langle b _ {j} ,b ^ {*} _ {k} \rangle +\mu _ {k,k-1} | b ^ {*} _ {k} |  ^ {2} \langle b _ {j} ,b ^ {*} _ {k-1} \rangle }{| b ^ {\prime *} _ {k-1} |  ^ {2} | b ^ {*} _ {k} |  ^ {2}}\\ &amp;amp; =\frac{| b ^ {\prime *} _ {k-1} |  ^ {2} \langle b _ {j} ,b ^ {*} _ {k} \rangle +\mu _ {k,k-1} | b ^ {*} _ {k} |  ^ {2} \langle b _ {j} ,b ^ {*} _ {k-1} \rangle -\mu _ {k,k-1} \langle b _ {k} ,b ^ {*} _ {k-1} \rangle \langle b _ {j} ,b ^ {*} _ {k} \rangle }{| b ^ {\prime *} _ {k-1} |  ^ {2} | b ^ {*} _ {k} |  ^ {2}}\\ &amp;amp; =\frac{| b ^ {\prime *} _ {k-1} |  ^ {2} \langle b _ {j} ,b ^ {*} _ {k} \rangle }{| b ^ {\prime *} _ {k-1} |  ^ {2} | b ^ {*} _ {k} |  ^ {2}} +\frac{\mu _ {k,k-1} | b ^ {*} _ {k} |  ^ {2} \langle b _ {j} ,b ^ {*} _ {k-1} \rangle }{| b ^ {\prime *} _ {k-1} |  ^ {2} | b ^ {*} _ {k} |  ^ {2}} -\frac{\mu _ {k,k-1} \langle b _ {j} ,b ^ {*} _ {k} \rangle \langle b _ {k} ,b ^ {*} _ {k-1} \rangle }{| b ^ {\prime *} _ {k-1} |  ^ {2} | b ^ {*} _ {k} |  ^ {2}}\\ &amp;amp; =\frac{\langle b _ {j} ,b ^ {*} _ {k} \rangle }{| b ^ {*} _ {k} |  ^ {2}} +\frac{\mu _ {k,k-1} | b ^ {*} _ {k-1} |  ^ {2}}{| b ^ {\prime *} _ {k-1} |  ^ {2}}\frac{\langle b _ {j} ,b ^ {*} _ {k-1} \rangle }{| b ^ {*} _ {k-1} |  ^ {2}} -\frac{\mu _ {k,k-1} | b ^ {*} _ {k-1} |  ^ {2}}{| b ^ {\prime *} _ {k-1} |  ^ {2}}\frac{\langle b _ {k} ,b ^ {*} _ {k-1} \rangle }{| b ^ {*} _ {k-1} |  ^ {2}}\frac{\langle b _ {j} ,b ^ {*} _ {k} \rangle }{| b ^ {*} _ {k} |  ^ {2}}\\ &amp;amp; =\mu _ {j,k} +\mu  ^ {\prime } _ {k,k-1} \mu _ {j,k-1} -\mu  ^ {\prime } _ {k,k-1} \mu _ {k,k-1} \mu _ {j,k}\\ &amp;amp; =\mu _ {j,k} +\mu  ^ {\prime } _ {k,k-1}( \mu _ {j,k-1} -\mu _ {k,k-1} \mu _ {j,k})\\ &amp;amp; =\mu _ {j,k} +\mu  ^ {\prime } _ {k,k-1} \mu  ^ {\prime } _ {j,k} \end{aligned} $$となる．
他のグラムシュミット係数については， $  b _ k $ と $  b _ {k-1} $ しか交換してないことから変化しないことは明らかである．よって示された． $ ■ $&lt;/p&gt;
&lt;p&gt;補題9.1の結果を用いれば，Algorithm 5の13行目のグラム・シュミットの直交化を $  \Theta(n) $ の処理で置き換えることができ，最終的にLLL全体は次のようになります．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mitsu1119.github.io/blog/lll_3.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;lll_3&#34;
	
	
&gt;
ちなみにこのLLLの計算量は，定理8.3の記号を用いれば $  O(n ^ 3 m \log X) $ です．早くなった！
LLLの最適化は現在も研究されている分野で，例えばDeepLLLやSegmentLLLなど，色々な種類のLLLが開発されています．これを見てLLLに興味を持った人は，ぜひ勉強して完全理解して自分に教えてください．&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
        </item>
        
    </channel>
</rss>
